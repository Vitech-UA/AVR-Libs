
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000120  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 000000a0  00000000  00000000  00000878  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000049b  00000000  00000000  00000918  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000019a  00000000  00000000  00000db3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000418  00000000  00000000  00000f4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000058  00000000  00000000  00001368  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ff  00000000  00000000  000013c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000006c  00000000  00000000  000014bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea ec       	ldi	r30, 0xCA	; 202
  3a:	f0 e0       	ldi	r31, 0x00	; 0
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 36       	cpi	r26, 0x60	; 96
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	06 d0       	rcall	.+12     	; 0x66 <main>
  5a:	35 c0       	rjmp	.+106    	; 0xc6 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <port_ini>:
﻿
#include "main.h"

void port_ini(void){
	PORTB = 0x00;
  5e:	18 ba       	out	0x18, r1	; 24
	DDRB = 0b00001000;
  60:	88 e0       	ldi	r24, 0x08	; 8
  62:	87 bb       	out	0x17, r24	; 23
}
  64:	08 95       	ret

00000066 <main>:

int main(void)
{
	int i = 0;
	
	port_ini();
  66:	fb df       	rcall	.-10     	; 0x5e <port_ini>
	InitPWM_Timer();
  68:	26 d0       	rcall	.+76     	; 0xb6 <InitPWM_Timer>
	OCR2 = 1;
  6a:	81 e0       	ldi	r24, 0x01	; 1
  6c:	83 bd       	out	0x23, r24	; 35
	
    while(1)
    {
       for (i=0;i<=250;i++)
  6e:	40 e0       	ldi	r20, 0x00	; 0
  70:	50 e0       	ldi	r21, 0x00	; 0
  72:	8b ef       	ldi	r24, 0xFB	; 251
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	30 e0       	ldi	r19, 0x00	; 0
  7a:	0b c0       	rjmp	.+22     	; 0x92 <main+0x2c>
       {
		   OCR2++;
  7c:	63 b5       	in	r22, 0x23	; 35
  7e:	6f 5f       	subi	r22, 0xFF	; 255
  80:	63 bd       	out	0x23, r22	; 35
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	e7 ea       	ldi	r30, 0xA7	; 167
  84:	f1 e6       	ldi	r31, 0x61	; 97
  86:	31 97       	sbiw	r30, 0x01	; 1
  88:	f1 f7       	brne	.-4      	; 0x86 <main+0x20>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <main+0x26>
  8c:	00 00       	nop
	InitPWM_Timer();
	OCR2 = 1;
	
    while(1)
    {
       for (i=0;i<=250;i++)
  8e:	4f 5f       	subi	r20, 0xFF	; 255
  90:	5f 4f       	sbci	r21, 0xFF	; 255
  92:	4b 3f       	cpi	r20, 0xFB	; 251
  94:	51 05       	cpc	r21, r1
  96:	94 f3       	brlt	.-28     	; 0x7c <main+0x16>
  98:	ac 01       	movw	r20, r24
		   OCR2++;
		   _delay_ms(100);
       }
	   for (i=0;i<=250;i++)
	   {
		   OCR2--;
  9a:	63 b5       	in	r22, 0x23	; 35
  9c:	61 50       	subi	r22, 0x01	; 1
  9e:	63 bd       	out	0x23, r22	; 35
  a0:	e7 ea       	ldi	r30, 0xA7	; 167
  a2:	f1 e6       	ldi	r31, 0x61	; 97
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <main+0x3e>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <main+0x44>
  aa:	00 00       	nop
  ac:	41 50       	subi	r20, 0x01	; 1
  ae:	50 40       	sbci	r21, 0x00	; 0
       for (i=0;i<=250;i++)
       {
		   OCR2++;
		   _delay_ms(100);
       }
	   for (i=0;i<=250;i++)
  b0:	a1 f7       	brne	.-24     	; 0x9a <main+0x34>
	InitPWM_Timer();
	OCR2 = 1;
	
    while(1)
    {
       for (i=0;i<=250;i++)
  b2:	a9 01       	movw	r20, r18
  b4:	ee cf       	rjmp	.-36     	; 0x92 <main+0x2c>

000000b6 <InitPWM_Timer>:
﻿#include "PWM.h"

void InitPWM_Timer(void){

ASSR = 0;	
  b6:	12 bc       	out	0x22, r1	; 34
TCCR2 = 0b01101110;
  b8:	8e e6       	ldi	r24, 0x6E	; 110
  ba:	85 bd       	out	0x25, r24	; 37
TCNT2 = 0x00;	
  bc:	14 bc       	out	0x24, r1	; 36
OCR2 = 0x00; // 0% скважности
  be:	13 bc       	out	0x23, r1	; 35
TIMSK |=0;
  c0:	89 b7       	in	r24, 0x39	; 57
  c2:	89 bf       	out	0x39, r24	; 57

  c4:	08 95       	ret

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>
