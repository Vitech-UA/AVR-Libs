
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000115c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000115c  000011f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000037  00800062  00800062  000011f2  2**0
                  ALLOC
  3 .stab         000033e4  00000000  00000000  000011f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000009aa  00000000  00000000  000045d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000120  00000000  00000000  00004f88  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014d8  00000000  00000000  000050a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000521  00000000  00000000  00006580  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009fa  00000000  00000000  00006aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000021c  00000000  00000000  0000749c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002b6  00000000  00000000  000076b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000085e  00000000  00000000  0000796e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	53 c0       	rjmp	.+166    	; 0xa8 <__ctors_end>
       2:	6d c0       	rjmp	.+218    	; 0xde <__bad_interrupt>
       4:	6c c0       	rjmp	.+216    	; 0xde <__bad_interrupt>
       6:	6b c0       	rjmp	.+214    	; 0xde <__bad_interrupt>
       8:	6a c0       	rjmp	.+212    	; 0xde <__bad_interrupt>
       a:	69 c0       	rjmp	.+210    	; 0xde <__bad_interrupt>
       c:	68 c0       	rjmp	.+208    	; 0xde <__bad_interrupt>
       e:	67 c0       	rjmp	.+206    	; 0xde <__bad_interrupt>
      10:	66 c0       	rjmp	.+204    	; 0xde <__bad_interrupt>
      12:	65 c0       	rjmp	.+202    	; 0xde <__bad_interrupt>
      14:	64 c0       	rjmp	.+200    	; 0xde <__bad_interrupt>
      16:	63 c0       	rjmp	.+198    	; 0xde <__bad_interrupt>
      18:	62 c0       	rjmp	.+196    	; 0xde <__bad_interrupt>
      1a:	61 c0       	rjmp	.+194    	; 0xde <__bad_interrupt>
      1c:	60 c0       	rjmp	.+192    	; 0xde <__bad_interrupt>
      1e:	5f c0       	rjmp	.+190    	; 0xde <__bad_interrupt>
      20:	5e c0       	rjmp	.+188    	; 0xde <__bad_interrupt>
      22:	5d c0       	rjmp	.+186    	; 0xde <__bad_interrupt>
      24:	5c c0       	rjmp	.+184    	; 0xde <__bad_interrupt>
      26:	07 63       	ori	r16, 0x37	; 55
      28:	42 36       	cpi	r20, 0x62	; 98
      2a:	b7 9b       	sbis	0x16, 7	; 22
      2c:	d8 a7       	lds	r29, 0x78
      2e:	1a 39       	cpi	r17, 0x9A	; 154
      30:	68 56       	subi	r22, 0x68	; 104
      32:	18 ae       	sts	0xb8, r17
      34:	ba ab       	sts	0x5a, r27
      36:	55 8c       	ldd	r5, Z+29	; 0x1d
      38:	1d 3c       	cpi	r17, 0xCD	; 205
      3a:	b7 cc       	rjmp	.-1682   	; 0xfffff9aa <__eeprom_end+0xff7ef9aa>
      3c:	57 63       	ori	r21, 0x37	; 55
      3e:	bd 6d       	ori	r27, 0xDD	; 221
      40:	ed fd       	.word	0xfded	; ????
      42:	75 3e       	cpi	r23, 0xE5	; 229
      44:	f6 17       	cp	r31, r22
      46:	72 31       	cpi	r23, 0x12	; 18
      48:	bf 00       	.word	0x00bf	; ????
      4a:	00 00       	nop
      4c:	80 3f       	cpi	r24, 0xF0	; 240
      4e:	08 00       	.word	0x0008	; ????
      50:	00 00       	nop
      52:	be 92       	st	-X, r11
      54:	24 49       	sbci	r18, 0x94	; 148
      56:	12 3e       	cpi	r17, 0xE2	; 226
      58:	ab aa       	sts	0x9b, r26
      5a:	aa 2a       	or	r10, r26
      5c:	be cd       	rjmp	.-1156   	; 0xfffffbda <__eeprom_end+0xff7efbda>
      5e:	cc cc       	rjmp	.-1640   	; 0xfffff9f8 <__eeprom_end+0xff7ef9f8>
      60:	4c 3e       	cpi	r20, 0xEC	; 236
      62:	00 00       	nop
      64:	00 80       	ld	r0, Z
      66:	be ab       	sts	0x5e, r27
      68:	aa aa       	sts	0x9a, r26
      6a:	aa 3e       	cpi	r26, 0xEA	; 234
      6c:	00 00       	nop
      6e:	00 00       	nop
      70:	bf 00       	.word	0x00bf	; ????
      72:	00 00       	nop
      74:	80 3f       	cpi	r24, 0xF0	; 240
      76:	00 00       	nop
      78:	00 00       	nop
      7a:	00 08       	sbc	r0, r0
      7c:	41 78       	andi	r20, 0x81	; 129
      7e:	d3 bb       	out	0x13, r29	; 19
      80:	43 87       	std	Z+11, r20	; 0x0b
      82:	d1 13       	cpse	r29, r17
      84:	3d 19       	sub	r19, r13
      86:	0e 3c       	cpi	r16, 0xCE	; 206
      88:	c3 bd       	out	0x23, r28	; 35
      8a:	42 82       	std	Z+2, r4	; 0x02
      8c:	ad 2b       	or	r26, r29
      8e:	3e 68       	ori	r19, 0x8E	; 142
      90:	ec 82       	std	Y+4, r14	; 0x04
      92:	76 be       	out	0x36, r7	; 54
      94:	d9 8f       	std	Y+25, r29	; 0x19
      96:	e1 a9       	sts	0x41, r30
      98:	3e 4c       	sbci	r19, 0xCE	; 206
      9a:	80 ef       	ldi	r24, 0xF0	; 240
      9c:	ff be       	out	0x3f, r15	; 63
      9e:	01 c4       	rjmp	.+2050   	; 0x8a2 <Number_7219+0x4c>
      a0:	ff 7f       	andi	r31, 0xFF	; 255
      a2:	3f 00       	.word	0x003f	; ????
      a4:	00 00       	nop
	...

000000a8 <__ctors_end>:
      a8:	11 24       	eor	r1, r1
      aa:	1f be       	out	0x3f, r1	; 63
      ac:	cf e5       	ldi	r28, 0x5F	; 95
      ae:	d4 e0       	ldi	r29, 0x04	; 4
      b0:	de bf       	out	0x3e, r29	; 62
      b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
      b4:	10 e0       	ldi	r17, 0x00	; 0
      b6:	a0 e6       	ldi	r26, 0x60	; 96
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	ec e5       	ldi	r30, 0x5C	; 92
      bc:	f1 e1       	ldi	r31, 0x11	; 17
      be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x10>
      c0:	05 90       	lpm	r0, Z+
      c2:	0d 92       	st	X+, r0
      c4:	a2 36       	cpi	r26, 0x62	; 98
      c6:	b1 07       	cpc	r27, r17
      c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0xc>

000000ca <__do_clear_bss>:
      ca:	10 e0       	ldi	r17, 0x00	; 0
      cc:	a2 e6       	ldi	r26, 0x62	; 98
      ce:	b0 e0       	ldi	r27, 0x00	; 0
      d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
      d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
      d4:	a9 39       	cpi	r26, 0x99	; 153
      d6:	b1 07       	cpc	r27, r17
      d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
      da:	33 d4       	rcall	.+2150   	; 0x942 <main>
      dc:	3d c8       	rjmp	.-3974   	; 0xfffff158 <__eeprom_end+0xff7ef158>

000000de <__bad_interrupt>:
      de:	90 cf       	rjmp	.-224    	; 0x0 <__vectors>

000000e0 <Read>:

#define BMP180_R 0xEF
#define BMP180_W 0xEE

// чтение регистра 16 бит
uint16_t Read(uint8_t address) {
      e0:	cf 93       	push	r28
      e2:	df 93       	push	r29
      e4:	c8 2f       	mov	r28, r24

	uint16_t msb=0;
	uint16_t lsb=0;
	uint16_t data;

	i2c_start_cond();               // запуск i2c
      e6:	1b d3       	rcall	.+1590   	; 0x71e <i2c_start_cond>
	i2c_send_byte(BMP180_W);        // передача адреса устройства, режим записи
      e8:	8e ee       	ldi	r24, 0xEE	; 238
      ea:	39 d3       	rcall	.+1650   	; 0x75e <i2c_send_byte>
	i2c_send_byte(address);	        // передача адреса памяти
      ec:	8c 2f       	mov	r24, r28
      ee:	37 d3       	rcall	.+1646   	; 0x75e <i2c_send_byte>
	i2c_stop_cond();                // остановка i2c
      f0:	da d2       	rcall	.+1460   	; 0x6a6 <i2c_stop_cond>

	i2c_start_cond();               // запуск i2c
      f2:	15 d3       	rcall	.+1578   	; 0x71e <i2c_start_cond>
	i2c_send_byte(BMP180_R);        // передача адреса устройства, режим чтения
      f4:	8f ee       	ldi	r24, 0xEF	; 239
      f6:	33 d3       	rcall	.+1638   	; 0x75e <i2c_send_byte>
	msb = i2c_get_byte(0);
      f8:	80 e0       	ldi	r24, 0x00	; 0
      fa:	54 d3       	rcall	.+1704   	; 0x7a4 <i2c_get_byte>
      fc:	d8 2f       	mov	r29, r24
	lsb = i2c_get_byte(1);
      fe:	81 e0       	ldi	r24, 0x01	; 1
     100:	51 d3       	rcall	.+1698   	; 0x7a4 <i2c_get_byte>
     102:	c8 2f       	mov	r28, r24
	i2c_stop_cond();                // остановка i2c
     104:	d0 d2       	rcall	.+1440   	; 0x6a6 <i2c_stop_cond>

	data = (msb << 8) + lsb;
     106:	3d 2f       	mov	r19, r29
     108:	20 e0       	ldi	r18, 0x00	; 0
     10a:	c9 01       	movw	r24, r18
     10c:	8c 0f       	add	r24, r28
     10e:	91 1d       	adc	r25, r1
	return data;

}
     110:	df 91       	pop	r29
     112:	cf 91       	pop	r28
     114:	08 95       	ret

00000116 <BMP180_Calibration>:


// получить данные для калибровки
void BMP180_Calibration (void) {

	ac1 = Read(0xAA);
     116:	8a ea       	ldi	r24, 0xAA	; 170
     118:	e3 df       	rcall	.-58     	; 0xe0 <Read>
     11a:	90 93 80 00 	sts	0x0080, r25
     11e:	80 93 7f 00 	sts	0x007F, r24
	ac2 = Read(0xAC);
     122:	8c ea       	ldi	r24, 0xAC	; 172
     124:	dd df       	rcall	.-70     	; 0xe0 <Read>
     126:	90 93 88 00 	sts	0x0088, r25
     12a:	80 93 87 00 	sts	0x0087, r24
	ac3 = Read(0xAE);
     12e:	8e ea       	ldi	r24, 0xAE	; 174
     130:	d7 df       	rcall	.-82     	; 0xe0 <Read>
     132:	90 93 98 00 	sts	0x0098, r25
     136:	80 93 97 00 	sts	0x0097, r24
	ac4 = Read(0xB0);
     13a:	80 eb       	ldi	r24, 0xB0	; 176
     13c:	d1 df       	rcall	.-94     	; 0xe0 <Read>
     13e:	90 93 8c 00 	sts	0x008C, r25
     142:	80 93 8b 00 	sts	0x008B, r24
	ac5 = Read(0xB2);
     146:	82 eb       	ldi	r24, 0xB2	; 178
     148:	cb df       	rcall	.-106    	; 0xe0 <Read>
     14a:	90 93 86 00 	sts	0x0086, r25
     14e:	80 93 85 00 	sts	0x0085, r24
	ac6 = Read(0xB4);
     152:	84 eb       	ldi	r24, 0xB4	; 180
     154:	c5 df       	rcall	.-118    	; 0xe0 <Read>
     156:	90 93 84 00 	sts	0x0084, r25
     15a:	80 93 83 00 	sts	0x0083, r24
	b1  = Read(0xB6);
     15e:	86 eb       	ldi	r24, 0xB6	; 182
     160:	bf df       	rcall	.-130    	; 0xe0 <Read>
     162:	90 93 82 00 	sts	0x0082, r25
     166:	80 93 81 00 	sts	0x0081, r24
	b2  = Read(0xB8);
     16a:	88 eb       	ldi	r24, 0xB8	; 184
     16c:	b9 df       	rcall	.-142    	; 0xe0 <Read>
     16e:	90 93 7c 00 	sts	0x007C, r25
     172:	80 93 7b 00 	sts	0x007B, r24
	mb  = Read(0xBA);
     176:	8a eb       	ldi	r24, 0xBA	; 186
     178:	b3 df       	rcall	.-154    	; 0xe0 <Read>
     17a:	90 93 7e 00 	sts	0x007E, r25
     17e:	80 93 7d 00 	sts	0x007D, r24
	mc  = Read(0xBC);
     182:	8c eb       	ldi	r24, 0xBC	; 188
     184:	ad df       	rcall	.-166    	; 0xe0 <Read>
     186:	90 93 8e 00 	sts	0x008E, r25
     18a:	80 93 8d 00 	sts	0x008D, r24
	md  = Read(0xBE);
     18e:	8e eb       	ldi	r24, 0xBE	; 190
     190:	a7 df       	rcall	.-178    	; 0xe0 <Read>
     192:	90 93 8a 00 	sts	0x008A, r25
     196:	80 93 89 00 	sts	0x0089, r24

}
     19a:	08 95       	ret

0000019c <BMP180_get_temper>:


// прочитать значение температуры
void BMP180_get_temper(void){

	i2c_start_cond();               // запуск i2c
     19c:	c0 d2       	rcall	.+1408   	; 0x71e <i2c_start_cond>
	i2c_send_byte(BMP180_W);        // передача адреса устройства, режим записи
     19e:	8e ee       	ldi	r24, 0xEE	; 238
     1a0:	de d2       	rcall	.+1468   	; 0x75e <i2c_send_byte>
	i2c_send_byte(0xF4);	        // передача адреса памяти
     1a2:	84 ef       	ldi	r24, 0xF4	; 244
     1a4:	dc d2       	rcall	.+1464   	; 0x75e <i2c_send_byte>
	i2c_send_byte(0x2E);	        // передача разрешения (oss) адреса памяти температуры (можно так же как для давления)
     1a6:	8e e2       	ldi	r24, 0x2E	; 46
     1a8:	da d2       	rcall	.+1460   	; 0x75e <i2c_send_byte>
	i2c_stop_cond();                // остановка i2c
     1aa:	7d d2       	rcall	.+1274   	; 0x6a6 <i2c_stop_cond>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ac:	8f e0       	ldi	r24, 0x0F	; 15
     1ae:	97 e2       	ldi	r25, 0x27	; 39
     1b0:	01 97       	sbiw	r24, 0x01	; 1
     1b2:	f1 f7       	brne	.-4      	; 0x1b0 <BMP180_get_temper+0x14>
     1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <BMP180_get_temper+0x1a>
     1b6:	00 00       	nop

	_delay_ms(5);                   // время на замер (от 5 до 26 мс в зависимости от разрешения (oss))

	temperature_1 = Read(0xF6);     // вычислить температуру
     1b8:	86 ef       	ldi	r24, 0xF6	; 246
     1ba:	92 df       	rcall	.-220    	; 0xe0 <Read>
     1bc:	a0 e0       	ldi	r26, 0x00	; 0
     1be:	b0 e0       	ldi	r27, 0x00	; 0
     1c0:	80 93 66 00 	sts	0x0066, r24
     1c4:	90 93 67 00 	sts	0x0067, r25
     1c8:	a0 93 68 00 	sts	0x0068, r26
     1cc:	b0 93 69 00 	sts	0x0069, r27

}
     1d0:	08 95       	ret

000001d2 <BMP180_get_pressure>:


// прочитать значение атмосферного давления
void BMP180_get_pressure(void){

	i2c_start_cond();               // запуск i2c
     1d2:	a5 d2       	rcall	.+1354   	; 0x71e <i2c_start_cond>
	i2c_send_byte(BMP180_W);        // передача адреса устройства, режим записи
     1d4:	8e ee       	ldi	r24, 0xEE	; 238
     1d6:	c3 d2       	rcall	.+1414   	; 0x75e <i2c_send_byte>
	i2c_send_byte(0xF4);	        // передача адреса памяти
     1d8:	84 ef       	ldi	r24, 0xF4	; 244
     1da:	c1 d2       	rcall	.+1410   	; 0x75e <i2c_send_byte>
	i2c_send_byte(0x34+(OSS<<6));	// передача разрешения (oss) адреса памяти температуры
     1dc:	84 ef       	ldi	r24, 0xF4	; 244
     1de:	bf d2       	rcall	.+1406   	; 0x75e <i2c_send_byte>
	i2c_stop_cond();                // остановка i2c
     1e0:	62 d2       	rcall	.+1220   	; 0x6a6 <i2c_stop_cond>
     1e2:	8f e1       	ldi	r24, 0x1F	; 31
     1e4:	9b ec       	ldi	r25, 0xCB	; 203
     1e6:	01 97       	sbiw	r24, 0x01	; 1
     1e8:	f1 f7       	brne	.-4      	; 0x1e6 <BMP180_get_pressure+0x14>
     1ea:	00 c0       	rjmp	.+0      	; 0x1ec <BMP180_get_pressure+0x1a>
     1ec:	00 00       	nop

	_delay_ms(26);                  // время на замер (от 5 до 26 мс в зависимости от разрешения (oss))

	i2c_start_cond();               // запуск i2c
     1ee:	97 d2       	rcall	.+1326   	; 0x71e <i2c_start_cond>
	i2c_send_byte(BMP180_W);        // передача адреса устройства, режим записи
     1f0:	8e ee       	ldi	r24, 0xEE	; 238
     1f2:	b5 d2       	rcall	.+1386   	; 0x75e <i2c_send_byte>
	i2c_send_byte(0xF6);	        // передача адреса памяти
     1f4:	86 ef       	ldi	r24, 0xF6	; 246
     1f6:	b3 d2       	rcall	.+1382   	; 0x75e <i2c_send_byte>
	i2c_stop_cond();                // остановка i2c
     1f8:	56 d2       	rcall	.+1196   	; 0x6a6 <i2c_stop_cond>

	i2c_start_cond();               // запуск i2c
     1fa:	91 d2       	rcall	.+1314   	; 0x71e <i2c_start_cond>
	i2c_send_byte(BMP180_R);        // передача адреса устройства, режим чтения
     1fc:	8f ee       	ldi	r24, 0xEF	; 239
     1fe:	af d2       	rcall	.+1374   	; 0x75e <i2c_send_byte>
	D1=i2c_get_byte(0);             // MSB
     200:	80 e0       	ldi	r24, 0x00	; 0
     202:	d0 d2       	rcall	.+1440   	; 0x7a4 <i2c_get_byte>
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	a0 e0       	ldi	r26, 0x00	; 0
     208:	b0 e0       	ldi	r27, 0x00	; 0
     20a:	80 93 93 00 	sts	0x0093, r24
     20e:	90 93 94 00 	sts	0x0094, r25
     212:	a0 93 95 00 	sts	0x0095, r26
     216:	b0 93 96 00 	sts	0x0096, r27
	D2=i2c_get_byte(0);             // LSB
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	c3 d2       	rcall	.+1414   	; 0x7a4 <i2c_get_byte>
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	a0 e0       	ldi	r26, 0x00	; 0
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	80 93 8f 00 	sts	0x008F, r24
     228:	90 93 90 00 	sts	0x0090, r25
     22c:	a0 93 91 00 	sts	0x0091, r26
     230:	b0 93 92 00 	sts	0x0092, r27
	D3=i2c_get_byte(1);             // XLSB
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	b6 d2       	rcall	.+1388   	; 0x7a4 <i2c_get_byte>
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	a0 e0       	ldi	r26, 0x00	; 0
     23c:	b0 e0       	ldi	r27, 0x00	; 0
     23e:	80 93 77 00 	sts	0x0077, r24
     242:	90 93 78 00 	sts	0x0078, r25
     246:	a0 93 79 00 	sts	0x0079, r26
     24a:	b0 93 7a 00 	sts	0x007A, r27
	i2c_stop_cond();                // остановка i2c
     24e:	2b d2       	rcall	.+1110   	; 0x6a6 <i2c_stop_cond>

	pressure_1 = ((D1 << 16) + (D2 << 8) + D3) >> (8-OSS);  // вычислить давление (в Па ?)
     250:	40 91 93 00 	lds	r20, 0x0093
     254:	50 91 94 00 	lds	r21, 0x0094
     258:	60 91 95 00 	lds	r22, 0x0095
     25c:	70 91 96 00 	lds	r23, 0x0096
     260:	ba 01       	movw	r22, r20
     262:	55 27       	eor	r21, r21
     264:	44 27       	eor	r20, r20
     266:	80 91 8f 00 	lds	r24, 0x008F
     26a:	90 91 90 00 	lds	r25, 0x0090
     26e:	a0 91 91 00 	lds	r26, 0x0091
     272:	b0 91 92 00 	lds	r27, 0x0092
     276:	ba 2f       	mov	r27, r26
     278:	a9 2f       	mov	r26, r25
     27a:	98 2f       	mov	r25, r24
     27c:	88 27       	eor	r24, r24
     27e:	84 0f       	add	r24, r20
     280:	95 1f       	adc	r25, r21
     282:	a6 1f       	adc	r26, r22
     284:	b7 1f       	adc	r27, r23
     286:	40 91 77 00 	lds	r20, 0x0077
     28a:	50 91 78 00 	lds	r21, 0x0078
     28e:	60 91 79 00 	lds	r22, 0x0079
     292:	70 91 7a 00 	lds	r23, 0x007A
     296:	84 0f       	add	r24, r20
     298:	95 1f       	adc	r25, r21
     29a:	a6 1f       	adc	r26, r22
     29c:	b7 1f       	adc	r27, r23
     29e:	68 94       	set
     2a0:	14 f8       	bld	r1, 4
     2a2:	b6 95       	lsr	r27
     2a4:	a7 95       	ror	r26
     2a6:	97 95       	ror	r25
     2a8:	87 95       	ror	r24
     2aa:	16 94       	lsr	r1
     2ac:	d1 f7       	brne	.-12     	; 0x2a2 <BMP180_get_pressure+0xd0>
     2ae:	80 93 62 00 	sts	0x0062, r24
     2b2:	90 93 63 00 	sts	0x0063, r25
     2b6:	a0 93 64 00 	sts	0x0064, r26
     2ba:	b0 93 65 00 	sts	0x0065, r27

}
     2be:	08 95       	ret

000002c0 <BMP180_calculation>:


// получить значения температуры и атмосферного давления с учетом калибровочных коэффициентов
void BMP180_calculation (int32_t* temperature, int32_t* pressure) {
     2c0:	4f 92       	push	r4
     2c2:	5f 92       	push	r5
     2c4:	6f 92       	push	r6
     2c6:	7f 92       	push	r7
     2c8:	8f 92       	push	r8
     2ca:	9f 92       	push	r9
     2cc:	af 92       	push	r10
     2ce:	bf 92       	push	r11
     2d0:	cf 92       	push	r12
     2d2:	df 92       	push	r13
     2d4:	ef 92       	push	r14
     2d6:	ff 92       	push	r15
     2d8:	0f 93       	push	r16
     2da:	1f 93       	push	r17
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
     2e4:	2c 97       	sbiw	r28, 0x0c	; 12
     2e6:	0f b6       	in	r0, 0x3f	; 63
     2e8:	f8 94       	cli
     2ea:	de bf       	out	0x3e, r29	; 62
     2ec:	0f be       	out	0x3f, r0	; 63
     2ee:	cd bf       	out	0x3d, r28	; 61
     2f0:	4c 01       	movw	r8, r24
     2f2:	8b 01       	movw	r16, r22
	int32_t ut=0;
	int32_t up=0;
	int32_t x1, x2, b5, b6, x3, b3, p;
	uint32_t b4, b7;

	BMP180_get_temper();
     2f4:	53 df       	rcall	.-346    	; 0x19c <BMP180_get_temper>
	ut+=temperature_1;
     2f6:	c0 90 66 00 	lds	r12, 0x0066
     2fa:	d0 90 67 00 	lds	r13, 0x0067
     2fe:	e0 90 68 00 	lds	r14, 0x0068
     302:	f0 90 69 00 	lds	r15, 0x0069

	BMP180_get_pressure();
     306:	65 df       	rcall	.-310    	; 0x1d2 <BMP180_get_pressure>
	up=pressure_1;
     308:	20 91 62 00 	lds	r18, 0x0062
     30c:	30 91 63 00 	lds	r19, 0x0063
     310:	40 91 64 00 	lds	r20, 0x0064
     314:	50 91 65 00 	lds	r21, 0x0065
     318:	2d 83       	std	Y+5, r18	; 0x05
     31a:	3e 83       	std	Y+6, r19	; 0x06
     31c:	4f 83       	std	Y+7, r20	; 0x07
     31e:	58 87       	std	Y+8, r21	; 0x08



	x1 = ((int32_t)ut - (int32_t)ac6) * (int32_t)ac5 >> 15;
     320:	80 91 83 00 	lds	r24, 0x0083
     324:	90 91 84 00 	lds	r25, 0x0084
     328:	a0 e0       	ldi	r26, 0x00	; 0
     32a:	b0 e0       	ldi	r27, 0x00	; 0
     32c:	a7 01       	movw	r20, r14
     32e:	96 01       	movw	r18, r12
     330:	28 1b       	sub	r18, r24
     332:	39 0b       	sbc	r19, r25
     334:	4a 0b       	sbc	r20, r26
     336:	5b 0b       	sbc	r21, r27
     338:	ca 01       	movw	r24, r20
     33a:	b9 01       	movw	r22, r18
     33c:	20 91 85 00 	lds	r18, 0x0085
     340:	30 91 86 00 	lds	r19, 0x0086
     344:	40 e0       	ldi	r20, 0x00	; 0
     346:	50 e0       	ldi	r21, 0x00	; 0
     348:	ab d6       	rcall	.+3414   	; 0x10a0 <__mulsi3>
     34a:	6b 01       	movw	r12, r22
     34c:	7c 01       	movw	r14, r24
     34e:	0b 2e       	mov	r0, r27
     350:	bf e0       	ldi	r27, 0x0F	; 15
     352:	f5 94       	asr	r15
     354:	e7 94       	ror	r14
     356:	d7 94       	ror	r13
     358:	c7 94       	ror	r12
     35a:	ba 95       	dec	r27
     35c:	d1 f7       	brne	.-12     	; 0x352 <BMP180_calculation+0x92>
     35e:	b0 2d       	mov	r27, r0
	x2 = ((int32_t)mc << 11) / (x1 + md);
     360:	60 91 8d 00 	lds	r22, 0x008D
     364:	70 91 8e 00 	lds	r23, 0x008E
     368:	cb 01       	movw	r24, r22
     36a:	aa 27       	eor	r26, r26
     36c:	97 fd       	sbrc	r25, 7
     36e:	a0 95       	com	r26
     370:	ba 2f       	mov	r27, r26
     372:	bc 01       	movw	r22, r24
     374:	cd 01       	movw	r24, r26
     376:	05 2e       	mov	r0, r21
     378:	5b e0       	ldi	r21, 0x0B	; 11
     37a:	66 0f       	add	r22, r22
     37c:	77 1f       	adc	r23, r23
     37e:	88 1f       	adc	r24, r24
     380:	99 1f       	adc	r25, r25
     382:	5a 95       	dec	r21
     384:	d1 f7       	brne	.-12     	; 0x37a <BMP180_calculation+0xba>
     386:	50 2d       	mov	r21, r0
     388:	20 91 89 00 	lds	r18, 0x0089
     38c:	30 91 8a 00 	lds	r19, 0x008A
     390:	44 27       	eor	r20, r20
     392:	37 fd       	sbrc	r19, 7
     394:	40 95       	com	r20
     396:	54 2f       	mov	r21, r20
     398:	2c 0d       	add	r18, r12
     39a:	3d 1d       	adc	r19, r13
     39c:	4e 1d       	adc	r20, r14
     39e:	5f 1d       	adc	r21, r15
     3a0:	c0 d6       	rcall	.+3456   	; 0x1122 <__divmodsi4>
	b5 = x1 + x2;
     3a2:	c2 0e       	add	r12, r18
     3a4:	d3 1e       	adc	r13, r19
     3a6:	e4 1e       	adc	r14, r20
     3a8:	f5 1e       	adc	r15, r21
	*temperature = (b5 + 8) >> 4;
     3aa:	d7 01       	movw	r26, r14
     3ac:	c6 01       	movw	r24, r12
     3ae:	08 96       	adiw	r24, 0x08	; 8
     3b0:	a1 1d       	adc	r26, r1
     3b2:	b1 1d       	adc	r27, r1
     3b4:	68 94       	set
     3b6:	13 f8       	bld	r1, 3
     3b8:	b5 95       	asr	r27
     3ba:	a7 95       	ror	r26
     3bc:	97 95       	ror	r25
     3be:	87 95       	ror	r24
     3c0:	16 94       	lsr	r1
     3c2:	d1 f7       	brne	.-12     	; 0x3b8 <BMP180_calculation+0xf8>
     3c4:	f4 01       	movw	r30, r8
     3c6:	80 83       	st	Z, r24
     3c8:	91 83       	std	Z+1, r25	; 0x01
     3ca:	a2 83       	std	Z+2, r26	; 0x02
     3cc:	b3 83       	std	Z+3, r27	; 0x03
	
	b6 = b5 - 4000;
     3ce:	20 e6       	ldi	r18, 0x60	; 96
     3d0:	30 ef       	ldi	r19, 0xF0	; 240
     3d2:	4f ef       	ldi	r20, 0xFF	; 255
     3d4:	5f ef       	ldi	r21, 0xFF	; 255
     3d6:	c2 0e       	add	r12, r18
     3d8:	d3 1e       	adc	r13, r19
     3da:	e4 1e       	adc	r14, r20
     3dc:	f5 1e       	adc	r15, r21
	x1 = (b2 * ((b6 * b6) >> 12)) >> 11;
     3de:	c7 01       	movw	r24, r14
     3e0:	b6 01       	movw	r22, r12
     3e2:	a7 01       	movw	r20, r14
     3e4:	96 01       	movw	r18, r12
     3e6:	5c d6       	rcall	.+3256   	; 0x10a0 <__mulsi3>
     3e8:	dc 01       	movw	r26, r24
     3ea:	cb 01       	movw	r24, r22
     3ec:	9c 01       	movw	r18, r24
     3ee:	ad 01       	movw	r20, r26
     3f0:	01 2e       	mov	r0, r17
     3f2:	1c e0       	ldi	r17, 0x0C	; 12
     3f4:	55 95       	asr	r21
     3f6:	47 95       	ror	r20
     3f8:	37 95       	ror	r19
     3fa:	27 95       	ror	r18
     3fc:	1a 95       	dec	r17
     3fe:	d1 f7       	brne	.-12     	; 0x3f4 <BMP180_calculation+0x134>
     400:	10 2d       	mov	r17, r0
     402:	29 83       	std	Y+1, r18	; 0x01
     404:	3a 83       	std	Y+2, r19	; 0x02
     406:	4b 83       	std	Y+3, r20	; 0x03
     408:	5c 83       	std	Y+4, r21	; 0x04
	x2 = (ac2 * b6) >> 11;
	x3 = x1 + x2;
	b3 = (((((int32_t) ac1) * 4 + x3)<<OSS) + 2)>> 2;
	x1 = (ac3 * b6) >> 13;
     40a:	60 91 97 00 	lds	r22, 0x0097
     40e:	70 91 98 00 	lds	r23, 0x0098
     412:	88 27       	eor	r24, r24
     414:	77 fd       	sbrc	r23, 7
     416:	80 95       	com	r24
     418:	98 2f       	mov	r25, r24
     41a:	a7 01       	movw	r20, r14
     41c:	96 01       	movw	r18, r12
     41e:	40 d6       	rcall	.+3200   	; 0x10a0 <__mulsi3>
     420:	4b 01       	movw	r8, r22
     422:	5c 01       	movw	r10, r24
     424:	07 2e       	mov	r0, r23
     426:	7d e0       	ldi	r23, 0x0D	; 13
     428:	b5 94       	asr	r11
     42a:	a7 94       	ror	r10
     42c:	97 94       	ror	r9
     42e:	87 94       	ror	r8
     430:	7a 95       	dec	r23
     432:	d1 f7       	brne	.-12     	; 0x428 <BMP180_calculation+0x168>
     434:	70 2d       	mov	r23, r0
	x2 = (b1 * ((b6 * b6) >> 12)) >> 16;
     436:	20 91 81 00 	lds	r18, 0x0081
     43a:	30 91 82 00 	lds	r19, 0x0082
     43e:	44 27       	eor	r20, r20
     440:	37 fd       	sbrc	r19, 7
     442:	40 95       	com	r20
     444:	54 2f       	mov	r21, r20
     446:	69 81       	ldd	r22, Y+1	; 0x01
     448:	7a 81       	ldd	r23, Y+2	; 0x02
     44a:	8b 81       	ldd	r24, Y+3	; 0x03
     44c:	9c 81       	ldd	r25, Y+4	; 0x04
     44e:	28 d6       	rcall	.+3152   	; 0x10a0 <__mulsi3>
     450:	dc 01       	movw	r26, r24
     452:	cb 01       	movw	r24, r22
     454:	cd 01       	movw	r24, r26
     456:	bb 27       	eor	r27, r27
     458:	97 fd       	sbrc	r25, 7
     45a:	b0 95       	com	r27
     45c:	ab 2f       	mov	r26, r27
	x3 = ((x1 + x2) + 2) >> 2;
     45e:	88 0d       	add	r24, r8
     460:	99 1d       	adc	r25, r9
     462:	aa 1d       	adc	r26, r10
     464:	bb 1d       	adc	r27, r11
     466:	02 96       	adiw	r24, 0x02	; 2
     468:	a1 1d       	adc	r26, r1
     46a:	b1 1d       	adc	r27, r1
     46c:	b5 95       	asr	r27
     46e:	a7 95       	ror	r26
     470:	97 95       	ror	r25
     472:	87 95       	ror	r24
     474:	b5 95       	asr	r27
     476:	a7 95       	ror	r26
     478:	97 95       	ror	r25
     47a:	87 95       	ror	r24
	b4 = (ac4 * (uint32_t) (x3 + 32768)) >> 15;
     47c:	bc 01       	movw	r22, r24
     47e:	cd 01       	movw	r24, r26
     480:	60 50       	subi	r22, 0x00	; 0
     482:	70 48       	sbci	r23, 0x80	; 128
     484:	8f 4f       	sbci	r24, 0xFF	; 255
     486:	9f 4f       	sbci	r25, 0xFF	; 255
     488:	20 91 8b 00 	lds	r18, 0x008B
     48c:	30 91 8c 00 	lds	r19, 0x008C
     490:	40 e0       	ldi	r20, 0x00	; 0
     492:	50 e0       	ldi	r21, 0x00	; 0
     494:	05 d6       	rcall	.+3082   	; 0x10a0 <__mulsi3>
     496:	dc 01       	movw	r26, r24
     498:	cb 01       	movw	r24, r22
     49a:	9c 01       	movw	r18, r24
     49c:	ad 01       	movw	r20, r26
     49e:	01 2e       	mov	r0, r17
     4a0:	1f e0       	ldi	r17, 0x0F	; 15
     4a2:	56 95       	lsr	r21
     4a4:	47 95       	ror	r20
     4a6:	37 95       	ror	r19
     4a8:	27 95       	ror	r18
     4aa:	1a 95       	dec	r17
     4ac:	d1 f7       	brne	.-12     	; 0x4a2 <__stack+0x43>
     4ae:	10 2d       	mov	r17, r0
     4b0:	29 87       	std	Y+9, r18	; 0x09
     4b2:	3a 87       	std	Y+10, r19	; 0x0a
     4b4:	4b 87       	std	Y+11, r20	; 0x0b
     4b6:	5c 87       	std	Y+12, r21	; 0x0c
	
	b6 = b5 - 4000;
	x1 = (b2 * ((b6 * b6) >> 12)) >> 11;
	x2 = (ac2 * b6) >> 11;
	x3 = x1 + x2;
	b3 = (((((int32_t) ac1) * 4 + x3)<<OSS) + 2)>> 2;
     4b8:	40 90 7f 00 	lds	r4, 0x007F
     4bc:	50 90 80 00 	lds	r5, 0x0080
     4c0:	66 24       	eor	r6, r6
     4c2:	57 fc       	sbrc	r5, 7
     4c4:	60 94       	com	r6
     4c6:	76 2c       	mov	r7, r6
     4c8:	44 0c       	add	r4, r4
     4ca:	55 1c       	adc	r5, r5
     4cc:	66 1c       	adc	r6, r6
     4ce:	77 1c       	adc	r7, r7
     4d0:	44 0c       	add	r4, r4
     4d2:	55 1c       	adc	r5, r5
     4d4:	66 1c       	adc	r6, r6
     4d6:	77 1c       	adc	r7, r7
	x2 = ((int32_t)mc << 11) / (x1 + md);
	b5 = x1 + x2;
	*temperature = (b5 + 8) >> 4;
	
	b6 = b5 - 4000;
	x1 = (b2 * ((b6 * b6) >> 12)) >> 11;
     4d8:	60 91 7b 00 	lds	r22, 0x007B
     4dc:	70 91 7c 00 	lds	r23, 0x007C
     4e0:	88 27       	eor	r24, r24
     4e2:	77 fd       	sbrc	r23, 7
     4e4:	80 95       	com	r24
     4e6:	98 2f       	mov	r25, r24
     4e8:	29 81       	ldd	r18, Y+1	; 0x01
     4ea:	3a 81       	ldd	r19, Y+2	; 0x02
     4ec:	4b 81       	ldd	r20, Y+3	; 0x03
     4ee:	5c 81       	ldd	r21, Y+4	; 0x04
     4f0:	d7 d5       	rcall	.+2990   	; 0x10a0 <__mulsi3>
     4f2:	4b 01       	movw	r8, r22
     4f4:	5c 01       	movw	r10, r24
     4f6:	07 2e       	mov	r0, r23
     4f8:	7b e0       	ldi	r23, 0x0B	; 11
     4fa:	b5 94       	asr	r11
     4fc:	a7 94       	ror	r10
     4fe:	97 94       	ror	r9
     500:	87 94       	ror	r8
     502:	7a 95       	dec	r23
     504:	d1 f7       	brne	.-12     	; 0x4fa <__stack+0x9b>
     506:	70 2d       	mov	r23, r0
	x2 = (ac2 * b6) >> 11;
     508:	60 91 87 00 	lds	r22, 0x0087
     50c:	70 91 88 00 	lds	r23, 0x0088
     510:	88 27       	eor	r24, r24
     512:	77 fd       	sbrc	r23, 7
     514:	80 95       	com	r24
     516:	98 2f       	mov	r25, r24
     518:	a7 01       	movw	r20, r14
     51a:	96 01       	movw	r18, r12
     51c:	c1 d5       	rcall	.+2946   	; 0x10a0 <__mulsi3>
     51e:	dc 01       	movw	r26, r24
     520:	cb 01       	movw	r24, r22
     522:	07 2e       	mov	r0, r23
     524:	7b e0       	ldi	r23, 0x0B	; 11
     526:	b5 95       	asr	r27
     528:	a7 95       	ror	r26
     52a:	97 95       	ror	r25
     52c:	87 95       	ror	r24
     52e:	7a 95       	dec	r23
     530:	d1 f7       	brne	.-12     	; 0x526 <__stack+0xc7>
     532:	70 2d       	mov	r23, r0
	x3 = x1 + x2;
     534:	88 0e       	add	r8, r24
     536:	99 1e       	adc	r9, r25
     538:	aa 1e       	adc	r10, r26
     53a:	bb 1e       	adc	r11, r27
	b3 = (((((int32_t) ac1) * 4 + x3)<<OSS) + 2)>> 2;
     53c:	84 0c       	add	r8, r4
     53e:	95 1c       	adc	r9, r5
     540:	a6 1c       	adc	r10, r6
     542:	b7 1c       	adc	r11, r7
     544:	88 0c       	add	r8, r8
     546:	99 1c       	adc	r9, r9
     548:	aa 1c       	adc	r10, r10
     54a:	bb 1c       	adc	r11, r11
	x1 = (ac3 * b6) >> 13;
	x2 = (b1 * ((b6 * b6) >> 12)) >> 16;
	x3 = ((x1 + x2) + 2) >> 2;
	b4 = (ac4 * (uint32_t) (x3 + 32768)) >> 15;
	b7 = ((uint32_t) (up - b3) * (50000 >> OSS));
     54c:	6d 81       	ldd	r22, Y+5	; 0x05
     54e:	7e 81       	ldd	r23, Y+6	; 0x06
     550:	8f 81       	ldd	r24, Y+7	; 0x07
     552:	98 85       	ldd	r25, Y+8	; 0x08
     554:	68 19       	sub	r22, r8
     556:	79 09       	sbc	r23, r9
     558:	8a 09       	sbc	r24, r10
     55a:	9b 09       	sbc	r25, r11
     55c:	2a e6       	ldi	r18, 0x6A	; 106
     55e:	38 e1       	ldi	r19, 0x18	; 24
     560:	40 e0       	ldi	r20, 0x00	; 0
     562:	50 e0       	ldi	r21, 0x00	; 0
     564:	9d d5       	rcall	.+2874   	; 0x10a0 <__mulsi3>
	//p = b7 < 0x80000000 ? (b7 * 2) / b4 : (b7 / b4) * 2;
	
	if (b7 < 0x80000000)
     566:	99 23       	and	r25, r25
     568:	64 f0       	brlt	.+24     	; 0x582 <__stack+0x123>
	{
		p = (b7 << 1) / b4;
     56a:	66 0f       	add	r22, r22
     56c:	77 1f       	adc	r23, r23
     56e:	88 1f       	adc	r24, r24
     570:	99 1f       	adc	r25, r25
     572:	29 85       	ldd	r18, Y+9	; 0x09
     574:	3a 85       	ldd	r19, Y+10	; 0x0a
     576:	4b 85       	ldd	r20, Y+11	; 0x0b
     578:	5c 85       	ldd	r21, Y+12	; 0x0c
     57a:	b1 d5       	rcall	.+2914   	; 0x10de <__udivmodsi4>
     57c:	69 01       	movw	r12, r18
     57e:	7a 01       	movw	r14, r20
     580:	0b c0       	rjmp	.+22     	; 0x598 <__stack+0x139>
	}
	else
	{
		p = (b7 / b4) << 1;
     582:	29 85       	ldd	r18, Y+9	; 0x09
     584:	3a 85       	ldd	r19, Y+10	; 0x0a
     586:	4b 85       	ldd	r20, Y+11	; 0x0b
     588:	5c 85       	ldd	r21, Y+12	; 0x0c
     58a:	a9 d5       	rcall	.+2898   	; 0x10de <__udivmodsi4>
     58c:	69 01       	movw	r12, r18
     58e:	7a 01       	movw	r14, r20
     590:	cc 0c       	add	r12, r12
     592:	dd 1c       	adc	r13, r13
     594:	ee 1c       	adc	r14, r14
     596:	ff 1c       	adc	r15, r15
	}

	x1 = (p >> 8) * (p >> 8);
     598:	55 27       	eor	r21, r21
     59a:	f7 fc       	sbrc	r15, 7
     59c:	5a 95       	dec	r21
     59e:	4f 2d       	mov	r20, r15
     5a0:	3e 2d       	mov	r19, r14
     5a2:	2d 2d       	mov	r18, r13
     5a4:	ca 01       	movw	r24, r20
     5a6:	b9 01       	movw	r22, r18
     5a8:	7b d5       	rcall	.+2806   	; 0x10a0 <__mulsi3>
	x1 = (x1 * 3038) >> 16;
     5aa:	2e ed       	ldi	r18, 0xDE	; 222
     5ac:	3b e0       	ldi	r19, 0x0B	; 11
     5ae:	40 e0       	ldi	r20, 0x00	; 0
     5b0:	50 e0       	ldi	r21, 0x00	; 0
     5b2:	76 d5       	rcall	.+2796   	; 0x10a0 <__mulsi3>
     5b4:	4c 01       	movw	r8, r24
     5b6:	bb 24       	eor	r11, r11
     5b8:	97 fc       	sbrc	r9, 7
     5ba:	b0 94       	com	r11
     5bc:	ab 2c       	mov	r10, r11
	x2 = (-7357 * p) >> 16;
     5be:	c7 01       	movw	r24, r14
     5c0:	b6 01       	movw	r22, r12
     5c2:	23 e4       	ldi	r18, 0x43	; 67
     5c4:	33 ee       	ldi	r19, 0xE3	; 227
     5c6:	4f ef       	ldi	r20, 0xFF	; 255
     5c8:	5f ef       	ldi	r21, 0xFF	; 255
     5ca:	6a d5       	rcall	.+2772   	; 0x10a0 <__mulsi3>
     5cc:	dc 01       	movw	r26, r24
     5ce:	cb 01       	movw	r24, r22
     5d0:	cd 01       	movw	r24, r26
     5d2:	bb 27       	eor	r27, r27
     5d4:	97 fd       	sbrc	r25, 7
     5d6:	b0 95       	com	r27
     5d8:	ab 2f       	mov	r26, r27
	*pressure = p + ((x1 + x2 + 3791) >> 4);
     5da:	88 0d       	add	r24, r8
     5dc:	99 1d       	adc	r25, r9
     5de:	aa 1d       	adc	r26, r10
     5e0:	bb 1d       	adc	r27, r11
     5e2:	81 53       	subi	r24, 0x31	; 49
     5e4:	91 4f       	sbci	r25, 0xF1	; 241
     5e6:	af 4f       	sbci	r26, 0xFF	; 255
     5e8:	bf 4f       	sbci	r27, 0xFF	; 255
     5ea:	68 94       	set
     5ec:	13 f8       	bld	r1, 3
     5ee:	b5 95       	asr	r27
     5f0:	a7 95       	ror	r26
     5f2:	97 95       	ror	r25
     5f4:	87 95       	ror	r24
     5f6:	16 94       	lsr	r1
     5f8:	d1 f7       	brne	.-12     	; 0x5ee <__stack+0x18f>
     5fa:	c8 0e       	add	r12, r24
     5fc:	d9 1e       	adc	r13, r25
     5fe:	ea 1e       	adc	r14, r26
     600:	fb 1e       	adc	r15, r27
     602:	d8 01       	movw	r26, r16
     604:	cd 92       	st	X+, r12
     606:	dd 92       	st	X+, r13
     608:	ed 92       	st	X+, r14
     60a:	fc 92       	st	X, r15
     60c:	13 97       	sbiw	r26, 0x03	; 3

}
     60e:	2c 96       	adiw	r28, 0x0c	; 12
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	f8 94       	cli
     614:	de bf       	out	0x3e, r29	; 62
     616:	0f be       	out	0x3f, r0	; 63
     618:	cd bf       	out	0x3d, r28	; 61
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	1f 91       	pop	r17
     620:	0f 91       	pop	r16
     622:	ff 90       	pop	r15
     624:	ef 90       	pop	r14
     626:	df 90       	pop	r13
     628:	cf 90       	pop	r12
     62a:	bf 90       	pop	r11
     62c:	af 90       	pop	r10
     62e:	9f 90       	pop	r9
     630:	8f 90       	pop	r8
     632:	7f 90       	pop	r7
     634:	6f 90       	pop	r6
     636:	5f 90       	pop	r5
     638:	4f 90       	pop	r4
     63a:	08 95       	ret

0000063c <bmp180CalcAltitude>:



// функция расчета высоты над уровнем моря (альтитуда) (функция берет очень много памяти из-за математических функций !!!)
void bmp180CalcAltitude(int32_t pressure){
     63c:	0f 93       	push	r16
     63e:	1f 93       	push	r17
	float temp;

	temp = (float) pressure/101325;
     640:	db d2       	rcall	.+1462   	; 0xbf8 <__floatsisf>
     642:	20 e8       	ldi	r18, 0x80	; 128
     644:	36 ee       	ldi	r19, 0xE6	; 230
     646:	45 ec       	ldi	r20, 0xC5	; 197
     648:	57 e4       	ldi	r21, 0x47	; 71
     64a:	3b d2       	rcall	.+1142   	; 0xac2 <__divsf3>
	temp = 1-pow(temp, 0.19029);
     64c:	22 e6       	ldi	r18, 0x62	; 98
     64e:	3b ed       	ldi	r19, 0xDB	; 219
     650:	42 e4       	ldi	r20, 0x42	; 66
     652:	5e e3       	ldi	r21, 0x3E	; 62
     654:	c0 d3       	rcall	.+1920   	; 0xdd6 <pow>
     656:	b6 2f       	mov	r27, r22
     658:	a7 2f       	mov	r26, r23
     65a:	38 2f       	mov	r19, r24
     65c:	29 2f       	mov	r18, r25
     65e:	60 e0       	ldi	r22, 0x00	; 0
     660:	70 e0       	ldi	r23, 0x00	; 0
     662:	80 e8       	ldi	r24, 0x80	; 128
     664:	9f e3       	ldi	r25, 0x3F	; 63
     666:	42 2f       	mov	r20, r18
     668:	0b 2f       	mov	r16, r27
     66a:	1a 2f       	mov	r17, r26
     66c:	23 2f       	mov	r18, r19
     66e:	34 2f       	mov	r19, r20
     670:	a9 01       	movw	r20, r18
     672:	98 01       	movw	r18, r16
     674:	c1 d1       	rcall	.+898    	; 0x9f8 <__subsf3>
	//altitude = round(44330*temp*10);
	altitude = 44330*temp*100;
     676:	20 e0       	ldi	r18, 0x00	; 0
     678:	3a e2       	ldi	r19, 0x2A	; 42
     67a:	4d e2       	ldi	r20, 0x2D	; 45
     67c:	57 e4       	ldi	r21, 0x47	; 71
     67e:	48 d3       	rcall	.+1680   	; 0xd10 <__mulsf3>
     680:	20 e0       	ldi	r18, 0x00	; 0
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	48 ec       	ldi	r20, 0xC8	; 200
     686:	52 e4       	ldi	r21, 0x42	; 66
     688:	43 d3       	rcall	.+1670   	; 0xd10 <__mulsf3>
     68a:	83 d2       	rcall	.+1286   	; 0xb92 <__fixsfsi>
     68c:	dc 01       	movw	r26, r24
     68e:	cb 01       	movw	r24, r22
     690:	80 93 6a 00 	sts	0x006A, r24
     694:	90 93 6b 00 	sts	0x006B, r25
     698:	a0 93 6c 00 	sts	0x006C, r26
     69c:	b0 93 6d 00 	sts	0x006D, r27
	//get altitude in dm
     6a0:	1f 91       	pop	r17
     6a2:	0f 91       	pop	r16
     6a4:	08 95       	ret

000006a6 <i2c_stop_cond>:
volatile unsigned char i2c_frame_error=0; // если > 0, значит произошла фрейм-ошибка (после STOP-команды, линии SDA и SCL не перешли в состояние HIGH, не подтянулись к + питания)
//===============================================================
//                   Генерация условия стоп
//===============================================================
void i2c_stop_cond (void)	{
	I2C_DDR |= _BV(SCL); // притянуть SCL (лог.0)
     6a6:	a5 9a       	sbi	0x14, 5	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6a8:	8a e1       	ldi	r24, 0x1A	; 26
     6aa:	8a 95       	dec	r24
     6ac:	f1 f7       	brne	.-4      	; 0x6aa <i2c_stop_cond+0x4>
     6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <i2c_stop_cond+0xa>
	I2C_DELAY
	I2C_DDR |= _BV(SDA); // притянуть SDA (лог.0)
     6b0:	a4 9a       	sbi	0x14, 4	; 20
     6b2:	8a e1       	ldi	r24, 0x1A	; 26
     6b4:	8a 95       	dec	r24
     6b6:	f1 f7       	brne	.-4      	; 0x6b4 <i2c_stop_cond+0xe>
     6b8:	00 c0       	rjmp	.+0      	; 0x6ba <i2c_stop_cond+0x14>
	I2C_DELAY
	
	I2C_DDR &= ~_BV(SCL); // отпустить SCL (лог.1)
     6ba:	a5 98       	cbi	0x14, 5	; 20
     6bc:	8a e1       	ldi	r24, 0x1A	; 26
     6be:	8a 95       	dec	r24
     6c0:	f1 f7       	brne	.-4      	; 0x6be <i2c_stop_cond+0x18>
     6c2:	00 c0       	rjmp	.+0      	; 0x6c4 <i2c_stop_cond+0x1e>
	I2C_DELAY
	I2C_DDR &= ~_BV(SDA); // отпустить SDA (лог.1)
     6c4:	a4 98       	cbi	0x14, 4	; 20
     6c6:	8a e1       	ldi	r24, 0x1A	; 26
     6c8:	8a 95       	dec	r24
     6ca:	f1 f7       	brne	.-4      	; 0x6c8 <i2c_stop_cond+0x22>
     6cc:	00 c0       	rjmp	.+0      	; 0x6ce <i2c_stop_cond+0x28>
	I2C_DELAY
	
	// проверка фрейм-ошибки
	i2c_frame_error=0;									// сброс счётчика фрейм-ошибок
     6ce:	10 92 76 00 	sts	0x0076, r1
	if ((I2C_PIN & _BV(SDA)) == 0) i2c_frame_error++;	// проберяем, чтобы на ноге SDA была лог.1, иначе выдаём ошибку фрейма
     6d2:	9c 99       	sbic	0x13, 4	; 19
     6d4:	05 c0       	rjmp	.+10     	; 0x6e0 <i2c_stop_cond+0x3a>
     6d6:	80 91 76 00 	lds	r24, 0x0076
     6da:	8f 5f       	subi	r24, 0xFF	; 255
     6dc:	80 93 76 00 	sts	0x0076, r24
	if ((I2C_PIN & _BV(SCL)) == 0) i2c_frame_error++;	// проберяем, чтобы на ноге SCL была лог.1, иначе выдаём ошибку фрейма
     6e0:	9d 99       	sbic	0x13, 5	; 19
     6e2:	05 c0       	rjmp	.+10     	; 0x6ee <i2c_stop_cond+0x48>
     6e4:	80 91 76 00 	lds	r24, 0x0076
     6e8:	8f 5f       	subi	r24, 0xFF	; 255
     6ea:	80 93 76 00 	sts	0x0076, r24
     6ee:	8a e1       	ldi	r24, 0x1A	; 26
     6f0:	8a 95       	dec	r24
     6f2:	f1 f7       	brne	.-4      	; 0x6f0 <i2c_stop_cond+0x4a>
     6f4:	00 c0       	rjmp	.+0      	; 0x6f6 <i2c_stop_cond+0x50>
     6f6:	8a e1       	ldi	r24, 0x1A	; 26
     6f8:	8a 95       	dec	r24
     6fa:	f1 f7       	brne	.-4      	; 0x6f8 <i2c_stop_cond+0x52>
     6fc:	00 c0       	rjmp	.+0      	; 0x6fe <i2c_stop_cond+0x58>
     6fe:	8a e1       	ldi	r24, 0x1A	; 26
     700:	8a 95       	dec	r24
     702:	f1 f7       	brne	.-4      	; 0x700 <i2c_stop_cond+0x5a>
     704:	00 c0       	rjmp	.+0      	; 0x706 <i2c_stop_cond+0x60>
     706:	8a e1       	ldi	r24, 0x1A	; 26
     708:	8a 95       	dec	r24
     70a:	f1 f7       	brne	.-4      	; 0x708 <i2c_stop_cond+0x62>
     70c:	00 c0       	rjmp	.+0      	; 0x70e <i2c_stop_cond+0x68>
	I2C_DELAY
	I2C_DELAY
	I2C_DELAY
	I2C_DELAY
}
     70e:	08 95       	ret

00000710 <i2c_init>:
//===============================================================
//                    инициализация шины I2C
//===============================================================
void i2c_init (void) {
	////////для I2C/////////
	I2C_DDR &= ~_BV(SDA);		// когда DDR=0, вывод SDA висит в воздухе, когда DDR=1 то SDA притянута к земле (регистром DDR мы и будем манипулировать)
     710:	a4 98       	cbi	0x14, 4	; 20
	I2C_DDR &= ~_BV(SCL);		// когда DDR=0, вывод SCL висит в воздухе, когда DDR=1 то SCL притянута к земле (регистром DDR мы и будем манипулировать)
     712:	a5 98       	cbi	0x14, 5	; 20
	I2C_PORT &= ~_BV(SDA);      // PORT=0 означает, что когда DDR=1 то SDA притянута к земле, когда DDR=0, то SDA висит в воздухе
     714:	ac 98       	cbi	0x15, 4	; 21
	I2C_PORT &= ~_BV(SCL);      // PORT=0 означает, что когда DDR=1 то SCL притянута к земле, когда DDR=0, то SCL висит в воздухе
     716:	ad 98       	cbi	0x15, 5	; 21
	i2c_stop_cond();   // стоп шины на случай сбоев
     718:	c6 df       	rcall	.-116    	; 0x6a6 <i2c_stop_cond>
	i2c_stop_cond();   // стоп шины на случай сбоев
     71a:	c5 df       	rcall	.-118    	; 0x6a6 <i2c_stop_cond>
}
     71c:	08 95       	ret

0000071e <i2c_start_cond>:

//===============================================================
//                    Генерация условия старт
//===============================================================
void i2c_start_cond (void)	{
	I2C_DDR |= _BV(SDA); // притянуть SDA (лог.0)
     71e:	a4 9a       	sbi	0x14, 4	; 20
     720:	8a e1       	ldi	r24, 0x1A	; 26
     722:	8a 95       	dec	r24
     724:	f1 f7       	brne	.-4      	; 0x722 <i2c_start_cond+0x4>
     726:	00 c0       	rjmp	.+0      	; 0x728 <i2c_start_cond+0xa>
	I2C_DELAY
	I2C_DDR |= _BV(SCL); // притянуть SCL (лог.0)
     728:	a5 9a       	sbi	0x14, 5	; 20
     72a:	8a e1       	ldi	r24, 0x1A	; 26
     72c:	8a 95       	dec	r24
     72e:	f1 f7       	brne	.-4      	; 0x72c <i2c_start_cond+0xe>
     730:	00 c0       	rjmp	.+0      	; 0x732 <i2c_start_cond+0x14>
	I2C_DELAY
}
     732:	08 95       	ret

00000734 <i2c_restart_cond>:

//===============================================================
//      Генерация условия рестарт
//===============================================================
void i2c_restart_cond (void)	{
	I2C_DDR &= ~_BV(SDA); // отпустить SDA (лог.1)
     734:	a4 98       	cbi	0x14, 4	; 20
     736:	8a e1       	ldi	r24, 0x1A	; 26
     738:	8a 95       	dec	r24
     73a:	f1 f7       	brne	.-4      	; 0x738 <i2c_restart_cond+0x4>
     73c:	00 c0       	rjmp	.+0      	; 0x73e <i2c_restart_cond+0xa>
	I2C_DELAY
	I2C_DDR &= ~_BV(SCL); // отпустить SCL (лог.1)
     73e:	a5 98       	cbi	0x14, 5	; 20
     740:	8a e1       	ldi	r24, 0x1A	; 26
     742:	8a 95       	dec	r24
     744:	f1 f7       	brne	.-4      	; 0x742 <i2c_restart_cond+0xe>
     746:	00 c0       	rjmp	.+0      	; 0x748 <i2c_restart_cond+0x14>
	I2C_DELAY
	
	I2C_DDR |= _BV(SDA); // притянуть SDA (лог.0)
     748:	a4 9a       	sbi	0x14, 4	; 20
     74a:	8a e1       	ldi	r24, 0x1A	; 26
     74c:	8a 95       	dec	r24
     74e:	f1 f7       	brne	.-4      	; 0x74c <i2c_restart_cond+0x18>
     750:	00 c0       	rjmp	.+0      	; 0x752 <i2c_restart_cond+0x1e>
	I2C_DELAY
	I2C_DDR |= _BV(SCL); // притянуть SCL (лог.0)
     752:	a5 9a       	sbi	0x14, 5	; 20
     754:	8a e1       	ldi	r24, 0x1A	; 26
     756:	8a 95       	dec	r24
     758:	f1 f7       	brne	.-4      	; 0x756 <i2c_restart_cond+0x22>
     75a:	00 c0       	rjmp	.+0      	; 0x75c <i2c_restart_cond+0x28>
	I2C_DELAY
}
     75c:	08 95       	ret

0000075e <i2c_send_byte>:


//===============================================================
//                    Отправка байта по I2С
//===============================================================
unsigned char i2c_send_byte (unsigned char data)	{
     75e:	98 e0       	ldi	r25, 0x08	; 8
	unsigned char i;
	unsigned char ack=1;			//АСК, если АСК=1 – произошла ошибка
	for (i=0;i<8;i++)
	{
		if ((data&0x80)==0x00) I2C_DDR |= _BV(SDA);	// Выставить бит на SDA (лог.0)
     760:	88 23       	and	r24, r24
     762:	14 f0       	brlt	.+4      	; 0x768 <i2c_send_byte+0xa>
     764:	a4 9a       	sbi	0x14, 4	; 20
     766:	01 c0       	rjmp	.+2      	; 0x76a <i2c_send_byte+0xc>
		else I2C_DDR &= ~_BV(SDA); // лог.1
     768:	a4 98       	cbi	0x14, 4	; 20
     76a:	2a e1       	ldi	r18, 0x1A	; 26
     76c:	2a 95       	dec	r18
     76e:	f1 f7       	brne	.-4      	; 0x76c <i2c_send_byte+0xe>
     770:	00 c0       	rjmp	.+0      	; 0x772 <i2c_send_byte+0x14>
		I2C_DELAY
		I2C_DDR &= ~_BV(SCL);	// Записать его импульсом на SCL       // отпустить SCL (лог.1)
     772:	a5 98       	cbi	0x14, 5	; 20
     774:	2a e1       	ldi	r18, 0x1A	; 26
     776:	2a 95       	dec	r18
     778:	f1 f7       	brne	.-4      	; 0x776 <i2c_send_byte+0x18>
     77a:	00 c0       	rjmp	.+0      	; 0x77c <i2c_send_byte+0x1e>
		I2C_DELAY
		I2C_DDR |= _BV(SCL); // притянуть SCL (лог.0)
     77c:	a5 9a       	sbi	0x14, 5	; 20
		data=data<<1;
     77e:	88 0f       	add	r24, r24
     780:	91 50       	subi	r25, 0x01	; 1
//                    Отправка байта по I2С
//===============================================================
unsigned char i2c_send_byte (unsigned char data)	{
	unsigned char i;
	unsigned char ack=1;			//АСК, если АСК=1 – произошла ошибка
	for (i=0;i<8;i++)
     782:	71 f7       	brne	.-36     	; 0x760 <i2c_send_byte+0x2>
		I2C_DDR &= ~_BV(SCL);	// Записать его импульсом на SCL       // отпустить SCL (лог.1)
		I2C_DELAY
		I2C_DDR |= _BV(SCL); // притянуть SCL (лог.0)
		data=data<<1;
	}
	I2C_DDR &= ~_BV(SDA); // отпустить SDA (лог.1), чтобы ведомое устройство смогло сгенерировать ACK
     784:	a4 98       	cbi	0x14, 4	; 20
     786:	8a e1       	ldi	r24, 0x1A	; 26
     788:	8a 95       	dec	r24
     78a:	f1 f7       	brne	.-4      	; 0x788 <i2c_send_byte+0x2a>
     78c:	00 c0       	rjmp	.+0      	; 0x78e <i2c_send_byte+0x30>
	I2C_DELAY
	I2C_DDR &= ~_BV(SCL); // отпустить SCL (лог.1), чтобы ведомое устройство передало ACK
     78e:	a5 98       	cbi	0x14, 5	; 20
     790:	2a e1       	ldi	r18, 0x1A	; 26
     792:	2a 95       	dec	r18
     794:	f1 f7       	brne	.-4      	; 0x792 <i2c_send_byte+0x34>
     796:	00 c0       	rjmp	.+0      	; 0x798 <i2c_send_byte+0x3a>
	I2C_DELAY
	if ((I2C_PIN&_BV(SDA))==_BV(SDA)) ack=1; else ack=0;	// Считать ACK
     798:	93 b3       	in	r25, 0x13	; 19

	I2C_DDR |= _BV(SCL); // притянуть SCL (лог.0)  // приём ACK завершён
     79a:	a5 9a       	sbi	0x14, 5	; 20
	}
	I2C_DDR &= ~_BV(SDA); // отпустить SDA (лог.1), чтобы ведомое устройство смогло сгенерировать ACK
	I2C_DELAY
	I2C_DDR &= ~_BV(SCL); // отпустить SCL (лог.1), чтобы ведомое устройство передало ACK
	I2C_DELAY
	if ((I2C_PIN&_BV(SDA))==_BV(SDA)) ack=1; else ack=0;	// Считать ACK
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	94 ff       	sbrs	r25, 4
     7a0:	80 e0       	ldi	r24, 0x00	; 0

	I2C_DDR |= _BV(SCL); // притянуть SCL (лог.0)  // приём ACK завершён
	
	return ack; // вернуть ACK (0) или NACK (1)
}
     7a2:	08 95       	ret

000007a4 <i2c_get_byte>:


//===============================================================
//                   Считывание байта по I2C
//===============================================================
unsigned char i2c_get_byte (unsigned char last_byte)	{
     7a4:	28 2f       	mov	r18, r24
	unsigned char i, res=0;
	I2C_DDR &= ~_BV(SDA); // отпустить SDA (лог.1)
     7a6:	a4 98       	cbi	0x14, 4	; 20
     7a8:	98 e0       	ldi	r25, 0x08	; 8

//===============================================================
//                   Считывание байта по I2C
//===============================================================
unsigned char i2c_get_byte (unsigned char last_byte)	{
	unsigned char i, res=0;
     7aa:	80 e0       	ldi	r24, 0x00	; 0
	I2C_DDR &= ~_BV(SDA); // отпустить SDA (лог.1)

	for (i=0;i<8;i++)
	{
		res=res<<1;
     7ac:	88 0f       	add	r24, r24
		I2C_DDR &= ~_BV(SCL); // отпустить SCL (лог.1)		//Импульс на SCL
     7ae:	a5 98       	cbi	0x14, 5	; 20
     7b0:	3a e1       	ldi	r19, 0x1A	; 26
     7b2:	3a 95       	dec	r19
     7b4:	f1 f7       	brne	.-4      	; 0x7b2 <i2c_get_byte+0xe>
     7b6:	00 c0       	rjmp	.+0      	; 0x7b8 <i2c_get_byte+0x14>
		I2C_DELAY
		if ((I2C_PIN&_BV(SDA))==_BV(SDA)) res=res|0x01; // Чтение SDA в переменную
     7b8:	9c 99       	sbic	0x13, 4	; 19
     7ba:	81 60       	ori	r24, 0x01	; 1
		I2C_DDR |= _BV(SCL); // притянуть SCL (лог.0)
     7bc:	a5 9a       	sbi	0x14, 5	; 20
     7be:	3a e1       	ldi	r19, 0x1A	; 26
     7c0:	3a 95       	dec	r19
     7c2:	f1 f7       	brne	.-4      	; 0x7c0 <i2c_get_byte+0x1c>
     7c4:	00 c0       	rjmp	.+0      	; 0x7c6 <i2c_get_byte+0x22>
     7c6:	91 50       	subi	r25, 0x01	; 1
//===============================================================
unsigned char i2c_get_byte (unsigned char last_byte)	{
	unsigned char i, res=0;
	I2C_DDR &= ~_BV(SDA); // отпустить SDA (лог.1)

	for (i=0;i<8;i++)
     7c8:	89 f7       	brne	.-30     	; 0x7ac <i2c_get_byte+0x8>
		if ((I2C_PIN&_BV(SDA))==_BV(SDA)) res=res|0x01; // Чтение SDA в переменную
		I2C_DDR |= _BV(SCL); // притянуть SCL (лог.0)
		I2C_DELAY
	}

	if (last_byte==0) I2C_DDR |= _BV(SDA); // притянуть SDA (лог.0)		// Подтверждение, ACK, будем считывать ещё один байт
     7ca:	22 23       	and	r18, r18
     7cc:	11 f4       	brne	.+4      	; 0x7d2 <i2c_get_byte+0x2e>
     7ce:	a4 9a       	sbi	0x14, 4	; 20
     7d0:	01 c0       	rjmp	.+2      	; 0x7d4 <i2c_get_byte+0x30>
	else I2C_DDR &= ~_BV(SDA); // отпустить SDA (лог.1)					// Без подтверждения, NACK, это последний считанный байт
     7d2:	a4 98       	cbi	0x14, 4	; 20
     7d4:	9a e1       	ldi	r25, 0x1A	; 26
     7d6:	9a 95       	dec	r25
     7d8:	f1 f7       	brne	.-4      	; 0x7d6 <i2c_get_byte+0x32>
     7da:	00 c0       	rjmp	.+0      	; 0x7dc <i2c_get_byte+0x38>
	I2C_DELAY
	I2C_DDR &= ~_BV(SCL); // отпустить SCL (лог.1)
     7dc:	a5 98       	cbi	0x14, 5	; 20
     7de:	3a e1       	ldi	r19, 0x1A	; 26
     7e0:	3a 95       	dec	r19
     7e2:	f1 f7       	brne	.-4      	; 0x7e0 <i2c_get_byte+0x3c>
     7e4:	00 c0       	rjmp	.+0      	; 0x7e6 <i2c_get_byte+0x42>
	I2C_DELAY
	I2C_DDR |= _BV(SCL); // притянуть SCL (лог.0)
     7e6:	a5 9a       	sbi	0x14, 5	; 20
     7e8:	9a e1       	ldi	r25, 0x1A	; 26
     7ea:	9a 95       	dec	r25
     7ec:	f1 f7       	brne	.-4      	; 0x7ea <i2c_get_byte+0x46>
     7ee:	00 c0       	rjmp	.+0      	; 0x7f0 <i2c_get_byte+0x4c>
	I2C_DELAY
	I2C_DDR &= ~_BV(SDA); // отпустить SDA (лог.1)
     7f0:	a4 98       	cbi	0x14, 4	; 20

	return res; // вернуть считанное значение
}
     7f2:	08 95       	ret

000007f4 <SPI_SendByte>:

char dg = 4; // Кількість розрядів в індикаторі.

void SPI_SendByte (char byte)
{
	SPDR = byte;
     7f4:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1 << SPIF)));
     7f6:	77 9b       	sbis	0x0e, 7	; 14
     7f8:	fe cf       	rjmp	.-4      	; 0x7f6 <SPI_SendByte+0x2>
}
     7fa:	08 95       	ret

000007fc <Send_7219>:
void Send_7219(char rg, char dt)
{
     7fc:	cf 93       	push	r28
     7fe:	c6 2f       	mov	r28, r22
	PORTB &= ~(1<<PORTB2);
     800:	c2 98       	cbi	0x18, 2	; 24
	SPI_SendByte(rg);
     802:	f8 df       	rcall	.-16     	; 0x7f4 <SPI_SendByte>
	SPI_SendByte(dt);
     804:	8c 2f       	mov	r24, r28
     806:	f6 df       	rcall	.-20     	; 0x7f4 <SPI_SendByte>
	PORTB |= (1<<PORTB2);
     808:	c2 9a       	sbi	0x18, 2	; 24
}
     80a:	cf 91       	pop	r28
     80c:	08 95       	ret

0000080e <Clear_7219>:
void Clear_7219(void)
{
     80e:	cf 93       	push	r28
	char i = dg;
     810:	c0 91 60 00 	lds	r28, 0x0060
	do {
		Send_7219(i, 0xF); //символ пустоты
     814:	8c 2f       	mov	r24, r28
     816:	6f e0       	ldi	r22, 0x0F	; 15
     818:	f1 df       	rcall	.-30     	; 0x7fc <Send_7219>
	} while (--i);
     81a:	c1 50       	subi	r28, 0x01	; 1
     81c:	d9 f7       	brne	.-10     	; 0x814 <Clear_7219+0x6>
}
     81e:	cf 91       	pop	r28
     820:	08 95       	ret

00000822 <SPI_Init>:
void SPI_Init(void)
{
 // ініціалізація портів а вихід
 DDRB |= ((1<<PORTB2)|(1<<PORTB3)|(1<<PORTB5));
     822:	87 b3       	in	r24, 0x17	; 23
     824:	8c 62       	ori	r24, 0x2C	; 44
     826:	87 bb       	out	0x17, r24	; 23
 PORTB &= ~((1<<PORTB2)|(1<<PORTB3)|(1<<PORTB5));
     828:	88 b3       	in	r24, 0x18	; 24
     82a:	83 7d       	andi	r24, 0xD3	; 211
     82c:	88 bb       	out	0x18, r24	; 24
 
 // ініціалізація шини SPI
 SPCR |= ((1<<SPE)|(1<<MSTR)|(1<<SPR0));	
     82e:	8d b1       	in	r24, 0x0d	; 13
     830:	81 65       	ori	r24, 0x51	; 81
     832:	8d b9       	out	0x0d, r24	; 13
}
     834:	08 95       	ret

00000836 <MAX7219_Init>:
void MAX7219_Init(void)
{
 Send_7219(0x09, 0xFF);
     836:	89 e0       	ldi	r24, 0x09	; 9
     838:	6f ef       	ldi	r22, 0xFF	; 255
     83a:	e0 df       	rcall	.-64     	; 0x7fc <Send_7219>
 Send_7219(0x0B, dg-1);
     83c:	60 91 60 00 	lds	r22, 0x0060
     840:	61 50       	subi	r22, 0x01	; 1
     842:	8b e0       	ldi	r24, 0x0B	; 11
     844:	db df       	rcall	.-74     	; 0x7fc <Send_7219>
 Send_7219(0x0A, 0x02); //Яскравість індикатора
     846:	8a e0       	ldi	r24, 0x0A	; 10
     848:	62 e0       	ldi	r22, 0x02	; 2
     84a:	d8 df       	rcall	.-80     	; 0x7fc <Send_7219>
 Send_7219(0x0C, 1);    //ввімкнення вимкнення індикатора
     84c:	8c e0       	ldi	r24, 0x0C	; 12
     84e:	61 e0       	ldi	r22, 0x01	; 1
     850:	d5 df       	rcall	.-86     	; 0x7fc <Send_7219>
 Clear_7219();
     852:	dd df       	rcall	.-70     	; 0x80e <Clear_7219>

}
     854:	08 95       	ret

00000856 <Number_7219>:
void Number_7219(volatile long n)
{
     856:	bf 92       	push	r11
     858:	cf 92       	push	r12
     85a:	df 92       	push	r13
     85c:	ef 92       	push	r14
     85e:	ff 92       	push	r15
     860:	0f 93       	push	r16
     862:	1f 93       	push	r17
     864:	cf 93       	push	r28
     866:	df 93       	push	r29
     868:	00 d0       	rcall	.+0      	; 0x86a <Number_7219+0x14>
     86a:	00 d0       	rcall	.+0      	; 0x86c <Number_7219+0x16>
     86c:	cd b7       	in	r28, 0x3d	; 61
     86e:	de b7       	in	r29, 0x3e	; 62
     870:	69 83       	std	Y+1, r22	; 0x01
     872:	7a 83       	std	Y+2, r23	; 0x02
     874:	8b 83       	std	Y+3, r24	; 0x03
     876:	9c 83       	std	Y+4, r25	; 0x04
	char ng = 0; //переменна¤ дл¤ минуса
	if (n < 0)
     878:	89 81       	ldd	r24, Y+1	; 0x01
     87a:	9a 81       	ldd	r25, Y+2	; 0x02
     87c:	ab 81       	ldd	r26, Y+3	; 0x03
     87e:	bc 81       	ldd	r27, Y+4	; 0x04
     880:	bb 23       	and	r27, r27
     882:	94 f4       	brge	.+36     	; 0x8a8 <Number_7219+0x52>
	{
		ng = 1;
		n *= -1;
     884:	89 81       	ldd	r24, Y+1	; 0x01
     886:	9a 81       	ldd	r25, Y+2	; 0x02
     888:	ab 81       	ldd	r26, Y+3	; 0x03
     88a:	bc 81       	ldd	r27, Y+4	; 0x04
     88c:	b0 95       	com	r27
     88e:	a0 95       	com	r26
     890:	90 95       	com	r25
     892:	81 95       	neg	r24
     894:	9f 4f       	sbci	r25, 0xFF	; 255
     896:	af 4f       	sbci	r26, 0xFF	; 255
     898:	bf 4f       	sbci	r27, 0xFF	; 255
     89a:	89 83       	std	Y+1, r24	; 0x01
     89c:	9a 83       	std	Y+2, r25	; 0x02
     89e:	ab 83       	std	Y+3, r26	; 0x03
     8a0:	bc 83       	std	Y+4, r27	; 0x04
void Number_7219(volatile long n)
{
	char ng = 0; //переменна¤ дл¤ минуса
	if (n < 0)
	{
		ng = 1;
     8a2:	bb 24       	eor	r11, r11
     8a4:	b3 94       	inc	r11
     8a6:	01 c0       	rjmp	.+2      	; 0x8aa <Number_7219+0x54>
 Clear_7219();

}
void Number_7219(volatile long n)
{
	char ng = 0; //переменна¤ дл¤ минуса
     8a8:	bb 24       	eor	r11, r11
	if (n < 0)
	{
		ng = 1;
		n *= -1;
	}
	Clear_7219();
     8aa:	b1 df       	rcall	.-158    	; 0x80e <Clear_7219>
	if (n == 0) {
     8ac:	89 81       	ldd	r24, Y+1	; 0x01
     8ae:	9a 81       	ldd	r25, Y+2	; 0x02
     8b0:	ab 81       	ldd	r26, Y+3	; 0x03
     8b2:	bc 81       	ldd	r27, Y+4	; 0x04
     8b4:	00 97       	sbiw	r24, 0x00	; 0
     8b6:	a1 05       	cpc	r26, r1
     8b8:	b1 05       	cpc	r27, r1
     8ba:	21 f4       	brne	.+8      	; 0x8c4 <Number_7219+0x6e>
		Send_7219(0x01, 0); //в первый разр¤д напишем 0
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	9d df       	rcall	.-198    	; 0x7fc <Send_7219>
		return;
     8c2:	31 c0       	rjmp	.+98     	; 0x926 <Number_7219+0xd0>
	{
		ng = 1;
		n *= -1;
	}
	Clear_7219();
	if (n == 0) {
     8c4:	00 e0       	ldi	r16, 0x00	; 0
		Send_7219(0x01, 0); //в первый разр¤д напишем 0
		return;
	}
	char i = 0;
	do {
		Send_7219(++i, n%10);
     8c6:	0f 2e       	mov	r0, r31
     8c8:	fa e0       	ldi	r31, 0x0A	; 10
     8ca:	cf 2e       	mov	r12, r31
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	df 2e       	mov	r13, r31
     8d0:	f0 e0       	ldi	r31, 0x00	; 0
     8d2:	ef 2e       	mov	r14, r31
     8d4:	f0 e0       	ldi	r31, 0x00	; 0
     8d6:	ff 2e       	mov	r15, r31
     8d8:	f0 2d       	mov	r31, r0
     8da:	01 c0       	rjmp	.+2      	; 0x8de <Number_7219+0x88>
     8dc:	01 2f       	mov	r16, r17
     8de:	10 2f       	mov	r17, r16
     8e0:	1f 5f       	subi	r17, 0xFF	; 255
     8e2:	69 81       	ldd	r22, Y+1	; 0x01
     8e4:	7a 81       	ldd	r23, Y+2	; 0x02
     8e6:	8b 81       	ldd	r24, Y+3	; 0x03
     8e8:	9c 81       	ldd	r25, Y+4	; 0x04
     8ea:	a7 01       	movw	r20, r14
     8ec:	96 01       	movw	r18, r12
     8ee:	19 d4       	rcall	.+2098   	; 0x1122 <__divmodsi4>
     8f0:	81 2f       	mov	r24, r17
     8f2:	84 df       	rcall	.-248    	; 0x7fc <Send_7219>
	    
		n /= 10;
     8f4:	69 81       	ldd	r22, Y+1	; 0x01
     8f6:	7a 81       	ldd	r23, Y+2	; 0x02
     8f8:	8b 81       	ldd	r24, Y+3	; 0x03
     8fa:	9c 81       	ldd	r25, Y+4	; 0x04
     8fc:	a7 01       	movw	r20, r14
     8fe:	96 01       	movw	r18, r12
     900:	10 d4       	rcall	.+2080   	; 0x1122 <__divmodsi4>
     902:	29 83       	std	Y+1, r18	; 0x01
     904:	3a 83       	std	Y+2, r19	; 0x02
     906:	4b 83       	std	Y+3, r20	; 0x03
     908:	5c 83       	std	Y+4, r21	; 0x04
	} while (n);
     90a:	89 81       	ldd	r24, Y+1	; 0x01
     90c:	9a 81       	ldd	r25, Y+2	; 0x02
     90e:	ab 81       	ldd	r26, Y+3	; 0x03
     910:	bc 81       	ldd	r27, Y+4	; 0x04
     912:	00 97       	sbiw	r24, 0x00	; 0
     914:	a1 05       	cpc	r26, r1
     916:	b1 05       	cpc	r27, r1
     918:	09 f7       	brne	.-62     	; 0x8dc <Number_7219+0x86>
	if (ng) {
     91a:	bb 20       	and	r11, r11
     91c:	21 f0       	breq	.+8      	; 0x926 <Number_7219+0xd0>
		Send_7219(i+1, 0xA); //символ -
     91e:	80 2f       	mov	r24, r16
     920:	8e 5f       	subi	r24, 0xFE	; 254
     922:	6a e0       	ldi	r22, 0x0A	; 10
     924:	6b df       	rcall	.-298    	; 0x7fc <Send_7219>
	}
}
     926:	0f 90       	pop	r0
     928:	0f 90       	pop	r0
     92a:	0f 90       	pop	r0
     92c:	0f 90       	pop	r0
     92e:	df 91       	pop	r29
     930:	cf 91       	pop	r28
     932:	1f 91       	pop	r17
     934:	0f 91       	pop	r16
     936:	ff 90       	pop	r15
     938:	ef 90       	pop	r14
     93a:	df 90       	pop	r13
     93c:	cf 90       	pop	r12
     93e:	bf 90       	pop	r11
     940:	08 95       	ret

00000942 <main>:
	int32_t    altitude = 0;

    char Pres_str[10];
    char Temp_str[10];

	i2c_init();
     942:	e6 de       	rcall	.-564    	; 0x710 <i2c_init>
	SPI_Init();
     944:	6e df       	rcall	.-292    	; 0x822 <SPI_Init>
	BMP180_Calibration();
     946:	e7 db       	rcall	.-2098   	; 0x116 <BMP180_Calibration>
	MAX7219_Init();
     948:	76 df       	rcall	.-276    	; 0x836 <MAX7219_Init>

	while (1)
	{

		BMP180_calculation (&temperature, &pressure);
     94a:	02 e7       	ldi	r16, 0x72	; 114
     94c:	10 e0       	ldi	r17, 0x00	; 0
     94e:	0f 2e       	mov	r0, r31
     950:	fe e6       	ldi	r31, 0x6E	; 110
     952:	af 2e       	mov	r10, r31
     954:	f0 e0       	ldi	r31, 0x00	; 0
     956:	bf 2e       	mov	r11, r31
     958:	f0 2d       	mov	r31, r0
		bmp180CalcAltitude(pressure);
		int pressure1 = pressure/1000;
        int pressure3 = pressure/133.322;    // перевод из Па в мм.рт.ст
		int temp1 = temperature/10;
     95a:	0f 2e       	mov	r0, r31
     95c:	fa e0       	ldi	r31, 0x0A	; 10
     95e:	cf 2e       	mov	r12, r31
     960:	f0 e0       	ldi	r31, 0x00	; 0
     962:	df 2e       	mov	r13, r31
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	ef 2e       	mov	r14, r31
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	ff 2e       	mov	r15, r31
     96c:	f0 2d       	mov	r31, r0
	MAX7219_Init();

	while (1)
	{

		BMP180_calculation (&temperature, &pressure);
     96e:	c8 01       	movw	r24, r16
     970:	b5 01       	movw	r22, r10
     972:	a6 dc       	rcall	.-1716   	; 0x2c0 <BMP180_calculation>
		bmp180CalcAltitude(pressure);
     974:	60 91 6e 00 	lds	r22, 0x006E
     978:	70 91 6f 00 	lds	r23, 0x006F
     97c:	80 91 70 00 	lds	r24, 0x0070
     980:	90 91 71 00 	lds	r25, 0x0071
     984:	5b de       	rcall	.-842    	; 0x63c <bmp180CalcAltitude>
		int pressure1 = pressure/1000;
        int pressure3 = pressure/133.322;    // перевод из Па в мм.рт.ст
		int temp1 = temperature/10;
     986:	60 91 72 00 	lds	r22, 0x0072
     98a:	70 91 73 00 	lds	r23, 0x0073
     98e:	80 91 74 00 	lds	r24, 0x0074
     992:	90 91 75 00 	lds	r25, 0x0075
     996:	a7 01       	movw	r20, r14
     998:	96 01       	movw	r18, r12
     99a:	c3 d3       	rcall	.+1926   	; 0x1122 <__divmodsi4>
     99c:	e9 01       	movw	r28, r18
	{

		BMP180_calculation (&temperature, &pressure);
		bmp180CalcAltitude(pressure);
		int pressure1 = pressure/1000;
        int pressure3 = pressure/133.322;    // перевод из Па в мм.рт.ст
     99e:	60 91 6e 00 	lds	r22, 0x006E
     9a2:	70 91 6f 00 	lds	r23, 0x006F
     9a6:	80 91 70 00 	lds	r24, 0x0070
     9aa:	90 91 71 00 	lds	r25, 0x0071
     9ae:	24 d1       	rcall	.+584    	; 0xbf8 <__floatsisf>
     9b0:	2f e6       	ldi	r18, 0x6F	; 111
     9b2:	32 e5       	ldi	r19, 0x52	; 82
     9b4:	45 e0       	ldi	r20, 0x05	; 5
     9b6:	53 e4       	ldi	r21, 0x43	; 67
     9b8:	84 d0       	rcall	.+264    	; 0xac2 <__divsf3>
     9ba:	eb d0       	rcall	.+470    	; 0xb92 <__fixsfsi>
		int temp1 = temperature/10;

        Number_7219(pressure3);
     9bc:	88 27       	eor	r24, r24
     9be:	77 fd       	sbrc	r23, 7
     9c0:	80 95       	com	r24
     9c2:	98 2f       	mov	r25, r24
     9c4:	48 df       	rcall	.-368    	; 0x856 <Number_7219>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9c6:	8f ef       	ldi	r24, 0xFF	; 255
     9c8:	9d e3       	ldi	r25, 0x3D	; 61
     9ca:	a9 e4       	ldi	r26, 0x49	; 73
     9cc:	81 50       	subi	r24, 0x01	; 1
     9ce:	90 40       	sbci	r25, 0x00	; 0
     9d0:	a0 40       	sbci	r26, 0x00	; 0
     9d2:	e1 f7       	brne	.-8      	; 0x9cc <main+0x8a>
     9d4:	00 c0       	rjmp	.+0      	; 0x9d6 <main+0x94>
     9d6:	00 00       	nop
		_delay_ms(3000);
		Number_7219(temp1);
     9d8:	be 01       	movw	r22, r28
     9da:	88 27       	eor	r24, r24
     9dc:	77 fd       	sbrc	r23, 7
     9de:	80 95       	com	r24
     9e0:	98 2f       	mov	r25, r24
     9e2:	39 df       	rcall	.-398    	; 0x856 <Number_7219>
     9e4:	8f ef       	ldi	r24, 0xFF	; 255
     9e6:	9d e3       	ldi	r25, 0x3D	; 61
     9e8:	a9 e4       	ldi	r26, 0x49	; 73
     9ea:	81 50       	subi	r24, 0x01	; 1
     9ec:	90 40       	sbci	r25, 0x00	; 0
     9ee:	a0 40       	sbci	r26, 0x00	; 0
     9f0:	e1 f7       	brne	.-8      	; 0x9ea <main+0xa8>
     9f2:	00 c0       	rjmp	.+0      	; 0x9f4 <main+0xb2>
     9f4:	00 00       	nop
     9f6:	bb cf       	rjmp	.-138    	; 0x96e <main+0x2c>

000009f8 <__subsf3>:
     9f8:	50 58       	subi	r21, 0x80	; 128

000009fa <__addsf3>:
     9fa:	bb 27       	eor	r27, r27
     9fc:	aa 27       	eor	r26, r26
     9fe:	0e d0       	rcall	.+28     	; 0xa1c <__addsf3x>
     a00:	4d c1       	rjmp	.+666    	; 0xc9c <__fp_round>
     a02:	3e d1       	rcall	.+636    	; 0xc80 <__fp_pscA>
     a04:	30 f0       	brcs	.+12     	; 0xa12 <__addsf3+0x18>
     a06:	43 d1       	rcall	.+646    	; 0xc8e <__fp_pscB>
     a08:	20 f0       	brcs	.+8      	; 0xa12 <__addsf3+0x18>
     a0a:	31 f4       	brne	.+12     	; 0xa18 <__addsf3+0x1e>
     a0c:	9f 3f       	cpi	r25, 0xFF	; 255
     a0e:	11 f4       	brne	.+4      	; 0xa14 <__addsf3+0x1a>
     a10:	1e f4       	brtc	.+6      	; 0xa18 <__addsf3+0x1e>
     a12:	33 c1       	rjmp	.+614    	; 0xc7a <__fp_nan>
     a14:	0e f4       	brtc	.+2      	; 0xa18 <__addsf3+0x1e>
     a16:	e0 95       	com	r30
     a18:	e7 fb       	bst	r30, 7
     a1a:	29 c1       	rjmp	.+594    	; 0xc6e <__fp_inf>

00000a1c <__addsf3x>:
     a1c:	e9 2f       	mov	r30, r25
     a1e:	4f d1       	rcall	.+670    	; 0xcbe <__fp_split3>
     a20:	80 f3       	brcs	.-32     	; 0xa02 <__addsf3+0x8>
     a22:	ba 17       	cp	r27, r26
     a24:	62 07       	cpc	r22, r18
     a26:	73 07       	cpc	r23, r19
     a28:	84 07       	cpc	r24, r20
     a2a:	95 07       	cpc	r25, r21
     a2c:	18 f0       	brcs	.+6      	; 0xa34 <__addsf3x+0x18>
     a2e:	71 f4       	brne	.+28     	; 0xa4c <__addsf3x+0x30>
     a30:	9e f5       	brtc	.+102    	; 0xa98 <__addsf3x+0x7c>
     a32:	67 c1       	rjmp	.+718    	; 0xd02 <__fp_zero>
     a34:	0e f4       	brtc	.+2      	; 0xa38 <__addsf3x+0x1c>
     a36:	e0 95       	com	r30
     a38:	0b 2e       	mov	r0, r27
     a3a:	ba 2f       	mov	r27, r26
     a3c:	a0 2d       	mov	r26, r0
     a3e:	0b 01       	movw	r0, r22
     a40:	b9 01       	movw	r22, r18
     a42:	90 01       	movw	r18, r0
     a44:	0c 01       	movw	r0, r24
     a46:	ca 01       	movw	r24, r20
     a48:	a0 01       	movw	r20, r0
     a4a:	11 24       	eor	r1, r1
     a4c:	ff 27       	eor	r31, r31
     a4e:	59 1b       	sub	r21, r25
     a50:	99 f0       	breq	.+38     	; 0xa78 <__addsf3x+0x5c>
     a52:	59 3f       	cpi	r21, 0xF9	; 249
     a54:	50 f4       	brcc	.+20     	; 0xa6a <__addsf3x+0x4e>
     a56:	50 3e       	cpi	r21, 0xE0	; 224
     a58:	68 f1       	brcs	.+90     	; 0xab4 <__addsf3x+0x98>
     a5a:	1a 16       	cp	r1, r26
     a5c:	f0 40       	sbci	r31, 0x00	; 0
     a5e:	a2 2f       	mov	r26, r18
     a60:	23 2f       	mov	r18, r19
     a62:	34 2f       	mov	r19, r20
     a64:	44 27       	eor	r20, r20
     a66:	58 5f       	subi	r21, 0xF8	; 248
     a68:	f3 cf       	rjmp	.-26     	; 0xa50 <__addsf3x+0x34>
     a6a:	46 95       	lsr	r20
     a6c:	37 95       	ror	r19
     a6e:	27 95       	ror	r18
     a70:	a7 95       	ror	r26
     a72:	f0 40       	sbci	r31, 0x00	; 0
     a74:	53 95       	inc	r21
     a76:	c9 f7       	brne	.-14     	; 0xa6a <__addsf3x+0x4e>
     a78:	7e f4       	brtc	.+30     	; 0xa98 <__addsf3x+0x7c>
     a7a:	1f 16       	cp	r1, r31
     a7c:	ba 0b       	sbc	r27, r26
     a7e:	62 0b       	sbc	r22, r18
     a80:	73 0b       	sbc	r23, r19
     a82:	84 0b       	sbc	r24, r20
     a84:	ba f0       	brmi	.+46     	; 0xab4 <__addsf3x+0x98>
     a86:	91 50       	subi	r25, 0x01	; 1
     a88:	a1 f0       	breq	.+40     	; 0xab2 <__addsf3x+0x96>
     a8a:	ff 0f       	add	r31, r31
     a8c:	bb 1f       	adc	r27, r27
     a8e:	66 1f       	adc	r22, r22
     a90:	77 1f       	adc	r23, r23
     a92:	88 1f       	adc	r24, r24
     a94:	c2 f7       	brpl	.-16     	; 0xa86 <__addsf3x+0x6a>
     a96:	0e c0       	rjmp	.+28     	; 0xab4 <__addsf3x+0x98>
     a98:	ba 0f       	add	r27, r26
     a9a:	62 1f       	adc	r22, r18
     a9c:	73 1f       	adc	r23, r19
     a9e:	84 1f       	adc	r24, r20
     aa0:	48 f4       	brcc	.+18     	; 0xab4 <__addsf3x+0x98>
     aa2:	87 95       	ror	r24
     aa4:	77 95       	ror	r23
     aa6:	67 95       	ror	r22
     aa8:	b7 95       	ror	r27
     aaa:	f7 95       	ror	r31
     aac:	9e 3f       	cpi	r25, 0xFE	; 254
     aae:	08 f0       	brcs	.+2      	; 0xab2 <__addsf3x+0x96>
     ab0:	b3 cf       	rjmp	.-154    	; 0xa18 <__addsf3+0x1e>
     ab2:	93 95       	inc	r25
     ab4:	88 0f       	add	r24, r24
     ab6:	08 f0       	brcs	.+2      	; 0xaba <__addsf3x+0x9e>
     ab8:	99 27       	eor	r25, r25
     aba:	ee 0f       	add	r30, r30
     abc:	97 95       	ror	r25
     abe:	87 95       	ror	r24
     ac0:	08 95       	ret

00000ac2 <__divsf3>:
     ac2:	0c d0       	rcall	.+24     	; 0xadc <__divsf3x>
     ac4:	eb c0       	rjmp	.+470    	; 0xc9c <__fp_round>
     ac6:	e3 d0       	rcall	.+454    	; 0xc8e <__fp_pscB>
     ac8:	40 f0       	brcs	.+16     	; 0xada <__divsf3+0x18>
     aca:	da d0       	rcall	.+436    	; 0xc80 <__fp_pscA>
     acc:	30 f0       	brcs	.+12     	; 0xada <__divsf3+0x18>
     ace:	21 f4       	brne	.+8      	; 0xad8 <__divsf3+0x16>
     ad0:	5f 3f       	cpi	r21, 0xFF	; 255
     ad2:	19 f0       	breq	.+6      	; 0xada <__divsf3+0x18>
     ad4:	cc c0       	rjmp	.+408    	; 0xc6e <__fp_inf>
     ad6:	51 11       	cpse	r21, r1
     ad8:	15 c1       	rjmp	.+554    	; 0xd04 <__fp_szero>
     ada:	cf c0       	rjmp	.+414    	; 0xc7a <__fp_nan>

00000adc <__divsf3x>:
     adc:	f0 d0       	rcall	.+480    	; 0xcbe <__fp_split3>
     ade:	98 f3       	brcs	.-26     	; 0xac6 <__divsf3+0x4>

00000ae0 <__divsf3_pse>:
     ae0:	99 23       	and	r25, r25
     ae2:	c9 f3       	breq	.-14     	; 0xad6 <__divsf3+0x14>
     ae4:	55 23       	and	r21, r21
     ae6:	b1 f3       	breq	.-20     	; 0xad4 <__divsf3+0x12>
     ae8:	95 1b       	sub	r25, r21
     aea:	55 0b       	sbc	r21, r21
     aec:	bb 27       	eor	r27, r27
     aee:	aa 27       	eor	r26, r26
     af0:	62 17       	cp	r22, r18
     af2:	73 07       	cpc	r23, r19
     af4:	84 07       	cpc	r24, r20
     af6:	38 f0       	brcs	.+14     	; 0xb06 <__divsf3_pse+0x26>
     af8:	9f 5f       	subi	r25, 0xFF	; 255
     afa:	5f 4f       	sbci	r21, 0xFF	; 255
     afc:	22 0f       	add	r18, r18
     afe:	33 1f       	adc	r19, r19
     b00:	44 1f       	adc	r20, r20
     b02:	aa 1f       	adc	r26, r26
     b04:	a9 f3       	breq	.-22     	; 0xaf0 <__divsf3_pse+0x10>
     b06:	33 d0       	rcall	.+102    	; 0xb6e <__divsf3_pse+0x8e>
     b08:	0e 2e       	mov	r0, r30
     b0a:	3a f0       	brmi	.+14     	; 0xb1a <__divsf3_pse+0x3a>
     b0c:	e0 e8       	ldi	r30, 0x80	; 128
     b0e:	30 d0       	rcall	.+96     	; 0xb70 <__divsf3_pse+0x90>
     b10:	91 50       	subi	r25, 0x01	; 1
     b12:	50 40       	sbci	r21, 0x00	; 0
     b14:	e6 95       	lsr	r30
     b16:	00 1c       	adc	r0, r0
     b18:	ca f7       	brpl	.-14     	; 0xb0c <__divsf3_pse+0x2c>
     b1a:	29 d0       	rcall	.+82     	; 0xb6e <__divsf3_pse+0x8e>
     b1c:	fe 2f       	mov	r31, r30
     b1e:	27 d0       	rcall	.+78     	; 0xb6e <__divsf3_pse+0x8e>
     b20:	66 0f       	add	r22, r22
     b22:	77 1f       	adc	r23, r23
     b24:	88 1f       	adc	r24, r24
     b26:	bb 1f       	adc	r27, r27
     b28:	26 17       	cp	r18, r22
     b2a:	37 07       	cpc	r19, r23
     b2c:	48 07       	cpc	r20, r24
     b2e:	ab 07       	cpc	r26, r27
     b30:	b0 e8       	ldi	r27, 0x80	; 128
     b32:	09 f0       	breq	.+2      	; 0xb36 <__divsf3_pse+0x56>
     b34:	bb 0b       	sbc	r27, r27
     b36:	80 2d       	mov	r24, r0
     b38:	bf 01       	movw	r22, r30
     b3a:	ff 27       	eor	r31, r31
     b3c:	93 58       	subi	r25, 0x83	; 131
     b3e:	5f 4f       	sbci	r21, 0xFF	; 255
     b40:	2a f0       	brmi	.+10     	; 0xb4c <__divsf3_pse+0x6c>
     b42:	9e 3f       	cpi	r25, 0xFE	; 254
     b44:	51 05       	cpc	r21, r1
     b46:	68 f0       	brcs	.+26     	; 0xb62 <__divsf3_pse+0x82>
     b48:	92 c0       	rjmp	.+292    	; 0xc6e <__fp_inf>
     b4a:	dc c0       	rjmp	.+440    	; 0xd04 <__fp_szero>
     b4c:	5f 3f       	cpi	r21, 0xFF	; 255
     b4e:	ec f3       	brlt	.-6      	; 0xb4a <__divsf3_pse+0x6a>
     b50:	98 3e       	cpi	r25, 0xE8	; 232
     b52:	dc f3       	brlt	.-10     	; 0xb4a <__divsf3_pse+0x6a>
     b54:	86 95       	lsr	r24
     b56:	77 95       	ror	r23
     b58:	67 95       	ror	r22
     b5a:	b7 95       	ror	r27
     b5c:	f7 95       	ror	r31
     b5e:	9f 5f       	subi	r25, 0xFF	; 255
     b60:	c9 f7       	brne	.-14     	; 0xb54 <__divsf3_pse+0x74>
     b62:	88 0f       	add	r24, r24
     b64:	91 1d       	adc	r25, r1
     b66:	96 95       	lsr	r25
     b68:	87 95       	ror	r24
     b6a:	97 f9       	bld	r25, 7
     b6c:	08 95       	ret
     b6e:	e1 e0       	ldi	r30, 0x01	; 1
     b70:	66 0f       	add	r22, r22
     b72:	77 1f       	adc	r23, r23
     b74:	88 1f       	adc	r24, r24
     b76:	bb 1f       	adc	r27, r27
     b78:	62 17       	cp	r22, r18
     b7a:	73 07       	cpc	r23, r19
     b7c:	84 07       	cpc	r24, r20
     b7e:	ba 07       	cpc	r27, r26
     b80:	20 f0       	brcs	.+8      	; 0xb8a <__divsf3_pse+0xaa>
     b82:	62 1b       	sub	r22, r18
     b84:	73 0b       	sbc	r23, r19
     b86:	84 0b       	sbc	r24, r20
     b88:	ba 0b       	sbc	r27, r26
     b8a:	ee 1f       	adc	r30, r30
     b8c:	88 f7       	brcc	.-30     	; 0xb70 <__divsf3_pse+0x90>
     b8e:	e0 95       	com	r30
     b90:	08 95       	ret

00000b92 <__fixsfsi>:
     b92:	04 d0       	rcall	.+8      	; 0xb9c <__fixunssfsi>
     b94:	68 94       	set
     b96:	b1 11       	cpse	r27, r1
     b98:	b5 c0       	rjmp	.+362    	; 0xd04 <__fp_szero>
     b9a:	08 95       	ret

00000b9c <__fixunssfsi>:
     b9c:	98 d0       	rcall	.+304    	; 0xcce <__fp_splitA>
     b9e:	88 f0       	brcs	.+34     	; 0xbc2 <__fixunssfsi+0x26>
     ba0:	9f 57       	subi	r25, 0x7F	; 127
     ba2:	90 f0       	brcs	.+36     	; 0xbc8 <__fixunssfsi+0x2c>
     ba4:	b9 2f       	mov	r27, r25
     ba6:	99 27       	eor	r25, r25
     ba8:	b7 51       	subi	r27, 0x17	; 23
     baa:	a0 f0       	brcs	.+40     	; 0xbd4 <__fixunssfsi+0x38>
     bac:	d1 f0       	breq	.+52     	; 0xbe2 <__fixunssfsi+0x46>
     bae:	66 0f       	add	r22, r22
     bb0:	77 1f       	adc	r23, r23
     bb2:	88 1f       	adc	r24, r24
     bb4:	99 1f       	adc	r25, r25
     bb6:	1a f0       	brmi	.+6      	; 0xbbe <__fixunssfsi+0x22>
     bb8:	ba 95       	dec	r27
     bba:	c9 f7       	brne	.-14     	; 0xbae <__fixunssfsi+0x12>
     bbc:	12 c0       	rjmp	.+36     	; 0xbe2 <__fixunssfsi+0x46>
     bbe:	b1 30       	cpi	r27, 0x01	; 1
     bc0:	81 f0       	breq	.+32     	; 0xbe2 <__fixunssfsi+0x46>
     bc2:	9f d0       	rcall	.+318    	; 0xd02 <__fp_zero>
     bc4:	b1 e0       	ldi	r27, 0x01	; 1
     bc6:	08 95       	ret
     bc8:	9c c0       	rjmp	.+312    	; 0xd02 <__fp_zero>
     bca:	67 2f       	mov	r22, r23
     bcc:	78 2f       	mov	r23, r24
     bce:	88 27       	eor	r24, r24
     bd0:	b8 5f       	subi	r27, 0xF8	; 248
     bd2:	39 f0       	breq	.+14     	; 0xbe2 <__fixunssfsi+0x46>
     bd4:	b9 3f       	cpi	r27, 0xF9	; 249
     bd6:	cc f3       	brlt	.-14     	; 0xbca <__fixunssfsi+0x2e>
     bd8:	86 95       	lsr	r24
     bda:	77 95       	ror	r23
     bdc:	67 95       	ror	r22
     bde:	b3 95       	inc	r27
     be0:	d9 f7       	brne	.-10     	; 0xbd8 <__fixunssfsi+0x3c>
     be2:	3e f4       	brtc	.+14     	; 0xbf2 <__fixunssfsi+0x56>
     be4:	90 95       	com	r25
     be6:	80 95       	com	r24
     be8:	70 95       	com	r23
     bea:	61 95       	neg	r22
     bec:	7f 4f       	sbci	r23, 0xFF	; 255
     bee:	8f 4f       	sbci	r24, 0xFF	; 255
     bf0:	9f 4f       	sbci	r25, 0xFF	; 255
     bf2:	08 95       	ret

00000bf4 <__floatunsisf>:
     bf4:	e8 94       	clt
     bf6:	09 c0       	rjmp	.+18     	; 0xc0a <__floatsisf+0x12>

00000bf8 <__floatsisf>:
     bf8:	97 fb       	bst	r25, 7
     bfa:	3e f4       	brtc	.+14     	; 0xc0a <__floatsisf+0x12>
     bfc:	90 95       	com	r25
     bfe:	80 95       	com	r24
     c00:	70 95       	com	r23
     c02:	61 95       	neg	r22
     c04:	7f 4f       	sbci	r23, 0xFF	; 255
     c06:	8f 4f       	sbci	r24, 0xFF	; 255
     c08:	9f 4f       	sbci	r25, 0xFF	; 255
     c0a:	99 23       	and	r25, r25
     c0c:	a9 f0       	breq	.+42     	; 0xc38 <__floatsisf+0x40>
     c0e:	f9 2f       	mov	r31, r25
     c10:	96 e9       	ldi	r25, 0x96	; 150
     c12:	bb 27       	eor	r27, r27
     c14:	93 95       	inc	r25
     c16:	f6 95       	lsr	r31
     c18:	87 95       	ror	r24
     c1a:	77 95       	ror	r23
     c1c:	67 95       	ror	r22
     c1e:	b7 95       	ror	r27
     c20:	f1 11       	cpse	r31, r1
     c22:	f8 cf       	rjmp	.-16     	; 0xc14 <__floatsisf+0x1c>
     c24:	fa f4       	brpl	.+62     	; 0xc64 <__floatsisf+0x6c>
     c26:	bb 0f       	add	r27, r27
     c28:	11 f4       	brne	.+4      	; 0xc2e <__floatsisf+0x36>
     c2a:	60 ff       	sbrs	r22, 0
     c2c:	1b c0       	rjmp	.+54     	; 0xc64 <__floatsisf+0x6c>
     c2e:	6f 5f       	subi	r22, 0xFF	; 255
     c30:	7f 4f       	sbci	r23, 0xFF	; 255
     c32:	8f 4f       	sbci	r24, 0xFF	; 255
     c34:	9f 4f       	sbci	r25, 0xFF	; 255
     c36:	16 c0       	rjmp	.+44     	; 0xc64 <__floatsisf+0x6c>
     c38:	88 23       	and	r24, r24
     c3a:	11 f0       	breq	.+4      	; 0xc40 <__floatsisf+0x48>
     c3c:	96 e9       	ldi	r25, 0x96	; 150
     c3e:	11 c0       	rjmp	.+34     	; 0xc62 <__floatsisf+0x6a>
     c40:	77 23       	and	r23, r23
     c42:	21 f0       	breq	.+8      	; 0xc4c <__floatsisf+0x54>
     c44:	9e e8       	ldi	r25, 0x8E	; 142
     c46:	87 2f       	mov	r24, r23
     c48:	76 2f       	mov	r23, r22
     c4a:	05 c0       	rjmp	.+10     	; 0xc56 <__floatsisf+0x5e>
     c4c:	66 23       	and	r22, r22
     c4e:	71 f0       	breq	.+28     	; 0xc6c <__floatsisf+0x74>
     c50:	96 e8       	ldi	r25, 0x86	; 134
     c52:	86 2f       	mov	r24, r22
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	60 e0       	ldi	r22, 0x00	; 0
     c58:	2a f0       	brmi	.+10     	; 0xc64 <__floatsisf+0x6c>
     c5a:	9a 95       	dec	r25
     c5c:	66 0f       	add	r22, r22
     c5e:	77 1f       	adc	r23, r23
     c60:	88 1f       	adc	r24, r24
     c62:	da f7       	brpl	.-10     	; 0xc5a <__floatsisf+0x62>
     c64:	88 0f       	add	r24, r24
     c66:	96 95       	lsr	r25
     c68:	87 95       	ror	r24
     c6a:	97 f9       	bld	r25, 7
     c6c:	08 95       	ret

00000c6e <__fp_inf>:
     c6e:	97 f9       	bld	r25, 7
     c70:	9f 67       	ori	r25, 0x7F	; 127
     c72:	80 e8       	ldi	r24, 0x80	; 128
     c74:	70 e0       	ldi	r23, 0x00	; 0
     c76:	60 e0       	ldi	r22, 0x00	; 0
     c78:	08 95       	ret

00000c7a <__fp_nan>:
     c7a:	9f ef       	ldi	r25, 0xFF	; 255
     c7c:	80 ec       	ldi	r24, 0xC0	; 192
     c7e:	08 95       	ret

00000c80 <__fp_pscA>:
     c80:	00 24       	eor	r0, r0
     c82:	0a 94       	dec	r0
     c84:	16 16       	cp	r1, r22
     c86:	17 06       	cpc	r1, r23
     c88:	18 06       	cpc	r1, r24
     c8a:	09 06       	cpc	r0, r25
     c8c:	08 95       	ret

00000c8e <__fp_pscB>:
     c8e:	00 24       	eor	r0, r0
     c90:	0a 94       	dec	r0
     c92:	12 16       	cp	r1, r18
     c94:	13 06       	cpc	r1, r19
     c96:	14 06       	cpc	r1, r20
     c98:	05 06       	cpc	r0, r21
     c9a:	08 95       	ret

00000c9c <__fp_round>:
     c9c:	09 2e       	mov	r0, r25
     c9e:	03 94       	inc	r0
     ca0:	00 0c       	add	r0, r0
     ca2:	11 f4       	brne	.+4      	; 0xca8 <__fp_round+0xc>
     ca4:	88 23       	and	r24, r24
     ca6:	52 f0       	brmi	.+20     	; 0xcbc <__fp_round+0x20>
     ca8:	bb 0f       	add	r27, r27
     caa:	40 f4       	brcc	.+16     	; 0xcbc <__fp_round+0x20>
     cac:	bf 2b       	or	r27, r31
     cae:	11 f4       	brne	.+4      	; 0xcb4 <__fp_round+0x18>
     cb0:	60 ff       	sbrs	r22, 0
     cb2:	04 c0       	rjmp	.+8      	; 0xcbc <__fp_round+0x20>
     cb4:	6f 5f       	subi	r22, 0xFF	; 255
     cb6:	7f 4f       	sbci	r23, 0xFF	; 255
     cb8:	8f 4f       	sbci	r24, 0xFF	; 255
     cba:	9f 4f       	sbci	r25, 0xFF	; 255
     cbc:	08 95       	ret

00000cbe <__fp_split3>:
     cbe:	57 fd       	sbrc	r21, 7
     cc0:	90 58       	subi	r25, 0x80	; 128
     cc2:	44 0f       	add	r20, r20
     cc4:	55 1f       	adc	r21, r21
     cc6:	59 f0       	breq	.+22     	; 0xcde <__fp_splitA+0x10>
     cc8:	5f 3f       	cpi	r21, 0xFF	; 255
     cca:	71 f0       	breq	.+28     	; 0xce8 <__fp_splitA+0x1a>
     ccc:	47 95       	ror	r20

00000cce <__fp_splitA>:
     cce:	88 0f       	add	r24, r24
     cd0:	97 fb       	bst	r25, 7
     cd2:	99 1f       	adc	r25, r25
     cd4:	61 f0       	breq	.+24     	; 0xcee <__fp_splitA+0x20>
     cd6:	9f 3f       	cpi	r25, 0xFF	; 255
     cd8:	79 f0       	breq	.+30     	; 0xcf8 <__fp_splitA+0x2a>
     cda:	87 95       	ror	r24
     cdc:	08 95       	ret
     cde:	12 16       	cp	r1, r18
     ce0:	13 06       	cpc	r1, r19
     ce2:	14 06       	cpc	r1, r20
     ce4:	55 1f       	adc	r21, r21
     ce6:	f2 cf       	rjmp	.-28     	; 0xccc <__fp_split3+0xe>
     ce8:	46 95       	lsr	r20
     cea:	f1 df       	rcall	.-30     	; 0xcce <__fp_splitA>
     cec:	08 c0       	rjmp	.+16     	; 0xcfe <__fp_splitA+0x30>
     cee:	16 16       	cp	r1, r22
     cf0:	17 06       	cpc	r1, r23
     cf2:	18 06       	cpc	r1, r24
     cf4:	99 1f       	adc	r25, r25
     cf6:	f1 cf       	rjmp	.-30     	; 0xcda <__fp_splitA+0xc>
     cf8:	86 95       	lsr	r24
     cfa:	71 05       	cpc	r23, r1
     cfc:	61 05       	cpc	r22, r1
     cfe:	08 94       	sec
     d00:	08 95       	ret

00000d02 <__fp_zero>:
     d02:	e8 94       	clt

00000d04 <__fp_szero>:
     d04:	bb 27       	eor	r27, r27
     d06:	66 27       	eor	r22, r22
     d08:	77 27       	eor	r23, r23
     d0a:	cb 01       	movw	r24, r22
     d0c:	97 f9       	bld	r25, 7
     d0e:	08 95       	ret

00000d10 <__mulsf3>:
     d10:	0b d0       	rcall	.+22     	; 0xd28 <__mulsf3x>
     d12:	c4 cf       	rjmp	.-120    	; 0xc9c <__fp_round>
     d14:	b5 df       	rcall	.-150    	; 0xc80 <__fp_pscA>
     d16:	28 f0       	brcs	.+10     	; 0xd22 <__mulsf3+0x12>
     d18:	ba df       	rcall	.-140    	; 0xc8e <__fp_pscB>
     d1a:	18 f0       	brcs	.+6      	; 0xd22 <__mulsf3+0x12>
     d1c:	95 23       	and	r25, r21
     d1e:	09 f0       	breq	.+2      	; 0xd22 <__mulsf3+0x12>
     d20:	a6 cf       	rjmp	.-180    	; 0xc6e <__fp_inf>
     d22:	ab cf       	rjmp	.-170    	; 0xc7a <__fp_nan>
     d24:	11 24       	eor	r1, r1
     d26:	ee cf       	rjmp	.-36     	; 0xd04 <__fp_szero>

00000d28 <__mulsf3x>:
     d28:	ca df       	rcall	.-108    	; 0xcbe <__fp_split3>
     d2a:	a0 f3       	brcs	.-24     	; 0xd14 <__mulsf3+0x4>

00000d2c <__mulsf3_pse>:
     d2c:	95 9f       	mul	r25, r21
     d2e:	d1 f3       	breq	.-12     	; 0xd24 <__mulsf3+0x14>
     d30:	95 0f       	add	r25, r21
     d32:	50 e0       	ldi	r21, 0x00	; 0
     d34:	55 1f       	adc	r21, r21
     d36:	62 9f       	mul	r22, r18
     d38:	f0 01       	movw	r30, r0
     d3a:	72 9f       	mul	r23, r18
     d3c:	bb 27       	eor	r27, r27
     d3e:	f0 0d       	add	r31, r0
     d40:	b1 1d       	adc	r27, r1
     d42:	63 9f       	mul	r22, r19
     d44:	aa 27       	eor	r26, r26
     d46:	f0 0d       	add	r31, r0
     d48:	b1 1d       	adc	r27, r1
     d4a:	aa 1f       	adc	r26, r26
     d4c:	64 9f       	mul	r22, r20
     d4e:	66 27       	eor	r22, r22
     d50:	b0 0d       	add	r27, r0
     d52:	a1 1d       	adc	r26, r1
     d54:	66 1f       	adc	r22, r22
     d56:	82 9f       	mul	r24, r18
     d58:	22 27       	eor	r18, r18
     d5a:	b0 0d       	add	r27, r0
     d5c:	a1 1d       	adc	r26, r1
     d5e:	62 1f       	adc	r22, r18
     d60:	73 9f       	mul	r23, r19
     d62:	b0 0d       	add	r27, r0
     d64:	a1 1d       	adc	r26, r1
     d66:	62 1f       	adc	r22, r18
     d68:	83 9f       	mul	r24, r19
     d6a:	a0 0d       	add	r26, r0
     d6c:	61 1d       	adc	r22, r1
     d6e:	22 1f       	adc	r18, r18
     d70:	74 9f       	mul	r23, r20
     d72:	33 27       	eor	r19, r19
     d74:	a0 0d       	add	r26, r0
     d76:	61 1d       	adc	r22, r1
     d78:	23 1f       	adc	r18, r19
     d7a:	84 9f       	mul	r24, r20
     d7c:	60 0d       	add	r22, r0
     d7e:	21 1d       	adc	r18, r1
     d80:	82 2f       	mov	r24, r18
     d82:	76 2f       	mov	r23, r22
     d84:	6a 2f       	mov	r22, r26
     d86:	11 24       	eor	r1, r1
     d88:	9f 57       	subi	r25, 0x7F	; 127
     d8a:	50 40       	sbci	r21, 0x00	; 0
     d8c:	8a f0       	brmi	.+34     	; 0xdb0 <__mulsf3_pse+0x84>
     d8e:	e1 f0       	breq	.+56     	; 0xdc8 <__mulsf3_pse+0x9c>
     d90:	88 23       	and	r24, r24
     d92:	4a f0       	brmi	.+18     	; 0xda6 <__mulsf3_pse+0x7a>
     d94:	ee 0f       	add	r30, r30
     d96:	ff 1f       	adc	r31, r31
     d98:	bb 1f       	adc	r27, r27
     d9a:	66 1f       	adc	r22, r22
     d9c:	77 1f       	adc	r23, r23
     d9e:	88 1f       	adc	r24, r24
     da0:	91 50       	subi	r25, 0x01	; 1
     da2:	50 40       	sbci	r21, 0x00	; 0
     da4:	a9 f7       	brne	.-22     	; 0xd90 <__mulsf3_pse+0x64>
     da6:	9e 3f       	cpi	r25, 0xFE	; 254
     da8:	51 05       	cpc	r21, r1
     daa:	70 f0       	brcs	.+28     	; 0xdc8 <__mulsf3_pse+0x9c>
     dac:	60 cf       	rjmp	.-320    	; 0xc6e <__fp_inf>
     dae:	aa cf       	rjmp	.-172    	; 0xd04 <__fp_szero>
     db0:	5f 3f       	cpi	r21, 0xFF	; 255
     db2:	ec f3       	brlt	.-6      	; 0xdae <__mulsf3_pse+0x82>
     db4:	98 3e       	cpi	r25, 0xE8	; 232
     db6:	dc f3       	brlt	.-10     	; 0xdae <__mulsf3_pse+0x82>
     db8:	86 95       	lsr	r24
     dba:	77 95       	ror	r23
     dbc:	67 95       	ror	r22
     dbe:	b7 95       	ror	r27
     dc0:	f7 95       	ror	r31
     dc2:	e7 95       	ror	r30
     dc4:	9f 5f       	subi	r25, 0xFF	; 255
     dc6:	c1 f7       	brne	.-16     	; 0xdb8 <__mulsf3_pse+0x8c>
     dc8:	fe 2b       	or	r31, r30
     dca:	88 0f       	add	r24, r24
     dcc:	91 1d       	adc	r25, r1
     dce:	96 95       	lsr	r25
     dd0:	87 95       	ror	r24
     dd2:	97 f9       	bld	r25, 7
     dd4:	08 95       	ret

00000dd6 <pow>:
     dd6:	fa 01       	movw	r30, r20
     dd8:	ee 0f       	add	r30, r30
     dda:	ff 1f       	adc	r31, r31
     ddc:	30 96       	adiw	r30, 0x00	; 0
     dde:	21 05       	cpc	r18, r1
     de0:	31 05       	cpc	r19, r1
     de2:	99 f1       	breq	.+102    	; 0xe4a <pow+0x74>
     de4:	61 15       	cp	r22, r1
     de6:	71 05       	cpc	r23, r1
     de8:	61 f4       	brne	.+24     	; 0xe02 <pow+0x2c>
     dea:	80 38       	cpi	r24, 0x80	; 128
     dec:	bf e3       	ldi	r27, 0x3F	; 63
     dee:	9b 07       	cpc	r25, r27
     df0:	49 f1       	breq	.+82     	; 0xe44 <pow+0x6e>
     df2:	68 94       	set
     df4:	90 38       	cpi	r25, 0x80	; 128
     df6:	81 05       	cpc	r24, r1
     df8:	61 f0       	breq	.+24     	; 0xe12 <pow+0x3c>
     dfa:	80 38       	cpi	r24, 0x80	; 128
     dfc:	bf ef       	ldi	r27, 0xFF	; 255
     dfe:	9b 07       	cpc	r25, r27
     e00:	41 f0       	breq	.+16     	; 0xe12 <pow+0x3c>
     e02:	99 23       	and	r25, r25
     e04:	42 f5       	brpl	.+80     	; 0xe56 <pow+0x80>
     e06:	ff 3f       	cpi	r31, 0xFF	; 255
     e08:	e1 05       	cpc	r30, r1
     e0a:	31 05       	cpc	r19, r1
     e0c:	21 05       	cpc	r18, r1
     e0e:	11 f1       	breq	.+68     	; 0xe54 <pow+0x7e>
     e10:	e8 94       	clt
     e12:	08 94       	sec
     e14:	e7 95       	ror	r30
     e16:	d9 01       	movw	r26, r18
     e18:	aa 23       	and	r26, r26
     e1a:	29 f4       	brne	.+10     	; 0xe26 <pow+0x50>
     e1c:	ab 2f       	mov	r26, r27
     e1e:	be 2f       	mov	r27, r30
     e20:	f8 5f       	subi	r31, 0xF8	; 248
     e22:	d0 f3       	brcs	.-12     	; 0xe18 <pow+0x42>
     e24:	10 c0       	rjmp	.+32     	; 0xe46 <pow+0x70>
     e26:	ff 5f       	subi	r31, 0xFF	; 255
     e28:	70 f4       	brcc	.+28     	; 0xe46 <pow+0x70>
     e2a:	a6 95       	lsr	r26
     e2c:	e0 f7       	brcc	.-8      	; 0xe26 <pow+0x50>
     e2e:	f7 39       	cpi	r31, 0x97	; 151
     e30:	50 f0       	brcs	.+20     	; 0xe46 <pow+0x70>
     e32:	19 f0       	breq	.+6      	; 0xe3a <pow+0x64>
     e34:	ff 3a       	cpi	r31, 0xAF	; 175
     e36:	38 f4       	brcc	.+14     	; 0xe46 <pow+0x70>
     e38:	9f 77       	andi	r25, 0x7F	; 127
     e3a:	9f 93       	push	r25
     e3c:	0c d0       	rcall	.+24     	; 0xe56 <pow+0x80>
     e3e:	0f 90       	pop	r0
     e40:	07 fc       	sbrc	r0, 7
     e42:	90 58       	subi	r25, 0x80	; 128
     e44:	08 95       	ret
     e46:	3e f0       	brts	.+14     	; 0xe56 <pow+0x80>
     e48:	18 cf       	rjmp	.-464    	; 0xc7a <__fp_nan>
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	80 e8       	ldi	r24, 0x80	; 128
     e50:	9f e3       	ldi	r25, 0x3F	; 63
     e52:	08 95       	ret
     e54:	4f e7       	ldi	r20, 0x7F	; 127
     e56:	9f 77       	andi	r25, 0x7F	; 127
     e58:	5f 93       	push	r21
     e5a:	4f 93       	push	r20
     e5c:	3f 93       	push	r19
     e5e:	2f 93       	push	r18
     e60:	9e d0       	rcall	.+316    	; 0xf9e <log>
     e62:	2f 91       	pop	r18
     e64:	3f 91       	pop	r19
     e66:	4f 91       	pop	r20
     e68:	5f 91       	pop	r21
     e6a:	52 df       	rcall	.-348    	; 0xd10 <__mulsf3>
     e6c:	05 c0       	rjmp	.+10     	; 0xe78 <exp>
     e6e:	19 f4       	brne	.+6      	; 0xe76 <pow+0xa0>
     e70:	0e f0       	brts	.+2      	; 0xe74 <pow+0x9e>
     e72:	fd ce       	rjmp	.-518    	; 0xc6e <__fp_inf>
     e74:	46 cf       	rjmp	.-372    	; 0xd02 <__fp_zero>
     e76:	01 cf       	rjmp	.-510    	; 0xc7a <__fp_nan>

00000e78 <exp>:
     e78:	2a df       	rcall	.-428    	; 0xcce <__fp_splitA>
     e7a:	c8 f3       	brcs	.-14     	; 0xe6e <pow+0x98>
     e7c:	96 38       	cpi	r25, 0x86	; 134
     e7e:	c0 f7       	brcc	.-16     	; 0xe70 <pow+0x9a>
     e80:	07 f8       	bld	r0, 7
     e82:	0f 92       	push	r0
     e84:	e8 94       	clt
     e86:	2b e3       	ldi	r18, 0x3B	; 59
     e88:	3a ea       	ldi	r19, 0xAA	; 170
     e8a:	48 eb       	ldi	r20, 0xB8	; 184
     e8c:	5f e7       	ldi	r21, 0x7F	; 127
     e8e:	4e df       	rcall	.-356    	; 0xd2c <__mulsf3_pse>
     e90:	0f 92       	push	r0
     e92:	0f 92       	push	r0
     e94:	0f 92       	push	r0
     e96:	4d b7       	in	r20, 0x3d	; 61
     e98:	5e b7       	in	r21, 0x3e	; 62
     e9a:	0f 92       	push	r0
     e9c:	c0 d0       	rcall	.+384    	; 0x101e <modf>
     e9e:	e6 e2       	ldi	r30, 0x26	; 38
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	16 d0       	rcall	.+44     	; 0xed0 <__fp_powser>
     ea4:	4f 91       	pop	r20
     ea6:	5f 91       	pop	r21
     ea8:	ef 91       	pop	r30
     eaa:	ff 91       	pop	r31
     eac:	e5 95       	asr	r30
     eae:	ee 1f       	adc	r30, r30
     eb0:	ff 1f       	adc	r31, r31
     eb2:	49 f0       	breq	.+18     	; 0xec6 <exp+0x4e>
     eb4:	fe 57       	subi	r31, 0x7E	; 126
     eb6:	e0 68       	ori	r30, 0x80	; 128
     eb8:	44 27       	eor	r20, r20
     eba:	ee 0f       	add	r30, r30
     ebc:	44 1f       	adc	r20, r20
     ebe:	fa 95       	dec	r31
     ec0:	e1 f7       	brne	.-8      	; 0xeba <exp+0x42>
     ec2:	41 95       	neg	r20
     ec4:	55 0b       	sbc	r21, r21
     ec6:	32 d0       	rcall	.+100    	; 0xf2c <ldexp>
     ec8:	0f 90       	pop	r0
     eca:	07 fe       	sbrs	r0, 7
     ecc:	26 c0       	rjmp	.+76     	; 0xf1a <inverse>
     ece:	08 95       	ret

00000ed0 <__fp_powser>:
     ed0:	df 93       	push	r29
     ed2:	cf 93       	push	r28
     ed4:	1f 93       	push	r17
     ed6:	0f 93       	push	r16
     ed8:	ff 92       	push	r15
     eda:	ef 92       	push	r14
     edc:	df 92       	push	r13
     ede:	7b 01       	movw	r14, r22
     ee0:	8c 01       	movw	r16, r24
     ee2:	68 94       	set
     ee4:	05 c0       	rjmp	.+10     	; 0xef0 <__fp_powser+0x20>
     ee6:	da 2e       	mov	r13, r26
     ee8:	ef 01       	movw	r28, r30
     eea:	1e df       	rcall	.-452    	; 0xd28 <__mulsf3x>
     eec:	fe 01       	movw	r30, r28
     eee:	e8 94       	clt
     ef0:	a5 91       	lpm	r26, Z+
     ef2:	25 91       	lpm	r18, Z+
     ef4:	35 91       	lpm	r19, Z+
     ef6:	45 91       	lpm	r20, Z+
     ef8:	55 91       	lpm	r21, Z+
     efa:	ae f3       	brts	.-22     	; 0xee6 <__fp_powser+0x16>
     efc:	ef 01       	movw	r28, r30
     efe:	8e dd       	rcall	.-1252   	; 0xa1c <__addsf3x>
     f00:	fe 01       	movw	r30, r28
     f02:	97 01       	movw	r18, r14
     f04:	a8 01       	movw	r20, r16
     f06:	da 94       	dec	r13
     f08:	79 f7       	brne	.-34     	; 0xee8 <__fp_powser+0x18>
     f0a:	df 90       	pop	r13
     f0c:	ef 90       	pop	r14
     f0e:	ff 90       	pop	r15
     f10:	0f 91       	pop	r16
     f12:	1f 91       	pop	r17
     f14:	cf 91       	pop	r28
     f16:	df 91       	pop	r29
     f18:	08 95       	ret

00000f1a <inverse>:
     f1a:	9b 01       	movw	r18, r22
     f1c:	ac 01       	movw	r20, r24
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	70 e0       	ldi	r23, 0x00	; 0
     f22:	80 e8       	ldi	r24, 0x80	; 128
     f24:	9f e3       	ldi	r25, 0x3F	; 63
     f26:	cd cd       	rjmp	.-1126   	; 0xac2 <__divsf3>
     f28:	a2 ce       	rjmp	.-700    	; 0xc6e <__fp_inf>
     f2a:	ac c0       	rjmp	.+344    	; 0x1084 <__fp_mpack>

00000f2c <ldexp>:
     f2c:	d0 de       	rcall	.-608    	; 0xcce <__fp_splitA>
     f2e:	e8 f3       	brcs	.-6      	; 0xf2a <inverse+0x10>
     f30:	99 23       	and	r25, r25
     f32:	d9 f3       	breq	.-10     	; 0xf2a <inverse+0x10>
     f34:	94 0f       	add	r25, r20
     f36:	51 1d       	adc	r21, r1
     f38:	bb f3       	brvs	.-18     	; 0xf28 <inverse+0xe>
     f3a:	91 50       	subi	r25, 0x01	; 1
     f3c:	50 40       	sbci	r21, 0x00	; 0
     f3e:	94 f0       	brlt	.+36     	; 0xf64 <ldexp+0x38>
     f40:	59 f0       	breq	.+22     	; 0xf58 <ldexp+0x2c>
     f42:	88 23       	and	r24, r24
     f44:	32 f0       	brmi	.+12     	; 0xf52 <ldexp+0x26>
     f46:	66 0f       	add	r22, r22
     f48:	77 1f       	adc	r23, r23
     f4a:	88 1f       	adc	r24, r24
     f4c:	91 50       	subi	r25, 0x01	; 1
     f4e:	50 40       	sbci	r21, 0x00	; 0
     f50:	c1 f7       	brne	.-16     	; 0xf42 <ldexp+0x16>
     f52:	9e 3f       	cpi	r25, 0xFE	; 254
     f54:	51 05       	cpc	r21, r1
     f56:	44 f7       	brge	.-48     	; 0xf28 <inverse+0xe>
     f58:	88 0f       	add	r24, r24
     f5a:	91 1d       	adc	r25, r1
     f5c:	96 95       	lsr	r25
     f5e:	87 95       	ror	r24
     f60:	97 f9       	bld	r25, 7
     f62:	08 95       	ret
     f64:	5f 3f       	cpi	r21, 0xFF	; 255
     f66:	ac f0       	brlt	.+42     	; 0xf92 <ldexp+0x66>
     f68:	98 3e       	cpi	r25, 0xE8	; 232
     f6a:	9c f0       	brlt	.+38     	; 0xf92 <ldexp+0x66>
     f6c:	bb 27       	eor	r27, r27
     f6e:	86 95       	lsr	r24
     f70:	77 95       	ror	r23
     f72:	67 95       	ror	r22
     f74:	b7 95       	ror	r27
     f76:	08 f4       	brcc	.+2      	; 0xf7a <ldexp+0x4e>
     f78:	b1 60       	ori	r27, 0x01	; 1
     f7a:	93 95       	inc	r25
     f7c:	c1 f7       	brne	.-16     	; 0xf6e <ldexp+0x42>
     f7e:	bb 0f       	add	r27, r27
     f80:	58 f7       	brcc	.-42     	; 0xf58 <ldexp+0x2c>
     f82:	11 f4       	brne	.+4      	; 0xf88 <ldexp+0x5c>
     f84:	60 ff       	sbrs	r22, 0
     f86:	e8 cf       	rjmp	.-48     	; 0xf58 <ldexp+0x2c>
     f88:	6f 5f       	subi	r22, 0xFF	; 255
     f8a:	7f 4f       	sbci	r23, 0xFF	; 255
     f8c:	8f 4f       	sbci	r24, 0xFF	; 255
     f8e:	9f 4f       	sbci	r25, 0xFF	; 255
     f90:	e3 cf       	rjmp	.-58     	; 0xf58 <ldexp+0x2c>
     f92:	b8 ce       	rjmp	.-656    	; 0xd04 <__fp_szero>
     f94:	0e f0       	brts	.+2      	; 0xf98 <ldexp+0x6c>
     f96:	76 c0       	rjmp	.+236    	; 0x1084 <__fp_mpack>
     f98:	70 ce       	rjmp	.-800    	; 0xc7a <__fp_nan>
     f9a:	68 94       	set
     f9c:	68 ce       	rjmp	.-816    	; 0xc6e <__fp_inf>

00000f9e <log>:
     f9e:	97 de       	rcall	.-722    	; 0xcce <__fp_splitA>
     fa0:	c8 f3       	brcs	.-14     	; 0xf94 <ldexp+0x68>
     fa2:	99 23       	and	r25, r25
     fa4:	d1 f3       	breq	.-12     	; 0xf9a <ldexp+0x6e>
     fa6:	c6 f3       	brts	.-16     	; 0xf98 <ldexp+0x6c>
     fa8:	df 93       	push	r29
     faa:	cf 93       	push	r28
     fac:	1f 93       	push	r17
     fae:	0f 93       	push	r16
     fb0:	ff 92       	push	r15
     fb2:	c9 2f       	mov	r28, r25
     fb4:	dd 27       	eor	r29, r29
     fb6:	88 23       	and	r24, r24
     fb8:	2a f0       	brmi	.+10     	; 0xfc4 <log+0x26>
     fba:	21 97       	sbiw	r28, 0x01	; 1
     fbc:	66 0f       	add	r22, r22
     fbe:	77 1f       	adc	r23, r23
     fc0:	88 1f       	adc	r24, r24
     fc2:	da f7       	brpl	.-10     	; 0xfba <log+0x1c>
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	40 e8       	ldi	r20, 0x80	; 128
     fca:	5f eb       	ldi	r21, 0xBF	; 191
     fcc:	9f e3       	ldi	r25, 0x3F	; 63
     fce:	88 39       	cpi	r24, 0x98	; 152
     fd0:	20 f0       	brcs	.+8      	; 0xfda <log+0x3c>
     fd2:	80 3e       	cpi	r24, 0xE0	; 224
     fd4:	30 f0       	brcs	.+12     	; 0xfe2 <log+0x44>
     fd6:	21 96       	adiw	r28, 0x01	; 1
     fd8:	8f 77       	andi	r24, 0x7F	; 127
     fda:	0f dd       	rcall	.-1506   	; 0x9fa <__addsf3>
     fdc:	ee e4       	ldi	r30, 0x4E	; 78
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	03 c0       	rjmp	.+6      	; 0xfe8 <log+0x4a>
     fe2:	0b dd       	rcall	.-1514   	; 0x9fa <__addsf3>
     fe4:	eb e7       	ldi	r30, 0x7B	; 123
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	73 df       	rcall	.-282    	; 0xed0 <__fp_powser>
     fea:	8b 01       	movw	r16, r22
     fec:	be 01       	movw	r22, r28
     fee:	ec 01       	movw	r28, r24
     ff0:	fb 2e       	mov	r15, r27
     ff2:	6f 57       	subi	r22, 0x7F	; 127
     ff4:	71 09       	sbc	r23, r1
     ff6:	75 95       	asr	r23
     ff8:	77 1f       	adc	r23, r23
     ffa:	88 0b       	sbc	r24, r24
     ffc:	99 0b       	sbc	r25, r25
     ffe:	fc dd       	rcall	.-1032   	; 0xbf8 <__floatsisf>
    1000:	28 e1       	ldi	r18, 0x18	; 24
    1002:	32 e7       	ldi	r19, 0x72	; 114
    1004:	41 e3       	ldi	r20, 0x31	; 49
    1006:	5f e3       	ldi	r21, 0x3F	; 63
    1008:	8f de       	rcall	.-738    	; 0xd28 <__mulsf3x>
    100a:	af 2d       	mov	r26, r15
    100c:	98 01       	movw	r18, r16
    100e:	ae 01       	movw	r20, r28
    1010:	ff 90       	pop	r15
    1012:	0f 91       	pop	r16
    1014:	1f 91       	pop	r17
    1016:	cf 91       	pop	r28
    1018:	df 91       	pop	r29
    101a:	00 dd       	rcall	.-1536   	; 0xa1c <__addsf3x>
    101c:	3f ce       	rjmp	.-898    	; 0xc9c <__fp_round>

0000101e <modf>:
    101e:	fa 01       	movw	r30, r20
    1020:	dc 01       	movw	r26, r24
    1022:	aa 0f       	add	r26, r26
    1024:	bb 1f       	adc	r27, r27
    1026:	9b 01       	movw	r18, r22
    1028:	ac 01       	movw	r20, r24
    102a:	bf 57       	subi	r27, 0x7F	; 127
    102c:	28 f4       	brcc	.+10     	; 0x1038 <modf+0x1a>
    102e:	22 27       	eor	r18, r18
    1030:	33 27       	eor	r19, r19
    1032:	44 27       	eor	r20, r20
    1034:	50 78       	andi	r21, 0x80	; 128
    1036:	1f c0       	rjmp	.+62     	; 0x1076 <modf+0x58>
    1038:	b7 51       	subi	r27, 0x17	; 23
    103a:	88 f4       	brcc	.+34     	; 0x105e <modf+0x40>
    103c:	ab 2f       	mov	r26, r27
    103e:	00 24       	eor	r0, r0
    1040:	46 95       	lsr	r20
    1042:	37 95       	ror	r19
    1044:	27 95       	ror	r18
    1046:	01 1c       	adc	r0, r1
    1048:	a3 95       	inc	r26
    104a:	d2 f3       	brmi	.-12     	; 0x1040 <modf+0x22>
    104c:	00 20       	and	r0, r0
    104e:	69 f0       	breq	.+26     	; 0x106a <modf+0x4c>
    1050:	22 0f       	add	r18, r18
    1052:	33 1f       	adc	r19, r19
    1054:	44 1f       	adc	r20, r20
    1056:	b3 95       	inc	r27
    1058:	da f3       	brmi	.-10     	; 0x1050 <modf+0x32>
    105a:	0d d0       	rcall	.+26     	; 0x1076 <modf+0x58>
    105c:	cd cc       	rjmp	.-1638   	; 0x9f8 <__subsf3>
    105e:	61 30       	cpi	r22, 0x01	; 1
    1060:	71 05       	cpc	r23, r1
    1062:	a0 e8       	ldi	r26, 0x80	; 128
    1064:	8a 07       	cpc	r24, r26
    1066:	b9 46       	sbci	r27, 0x69	; 105
    1068:	30 f4       	brcc	.+12     	; 0x1076 <modf+0x58>
    106a:	9b 01       	movw	r18, r22
    106c:	ac 01       	movw	r20, r24
    106e:	66 27       	eor	r22, r22
    1070:	77 27       	eor	r23, r23
    1072:	88 27       	eor	r24, r24
    1074:	90 78       	andi	r25, 0x80	; 128
    1076:	30 96       	adiw	r30, 0x00	; 0
    1078:	21 f0       	breq	.+8      	; 0x1082 <modf+0x64>
    107a:	20 83       	st	Z, r18
    107c:	31 83       	std	Z+1, r19	; 0x01
    107e:	42 83       	std	Z+2, r20	; 0x02
    1080:	53 83       	std	Z+3, r21	; 0x03
    1082:	08 95       	ret

00001084 <__fp_mpack>:
    1084:	9f 3f       	cpi	r25, 0xFF	; 255
    1086:	31 f0       	breq	.+12     	; 0x1094 <__fp_mpack_finite+0xc>

00001088 <__fp_mpack_finite>:
    1088:	91 50       	subi	r25, 0x01	; 1
    108a:	20 f4       	brcc	.+8      	; 0x1094 <__fp_mpack_finite+0xc>
    108c:	87 95       	ror	r24
    108e:	77 95       	ror	r23
    1090:	67 95       	ror	r22
    1092:	b7 95       	ror	r27
    1094:	88 0f       	add	r24, r24
    1096:	91 1d       	adc	r25, r1
    1098:	96 95       	lsr	r25
    109a:	87 95       	ror	r24
    109c:	97 f9       	bld	r25, 7
    109e:	08 95       	ret

000010a0 <__mulsi3>:
    10a0:	62 9f       	mul	r22, r18
    10a2:	d0 01       	movw	r26, r0
    10a4:	73 9f       	mul	r23, r19
    10a6:	f0 01       	movw	r30, r0
    10a8:	82 9f       	mul	r24, r18
    10aa:	e0 0d       	add	r30, r0
    10ac:	f1 1d       	adc	r31, r1
    10ae:	64 9f       	mul	r22, r20
    10b0:	e0 0d       	add	r30, r0
    10b2:	f1 1d       	adc	r31, r1
    10b4:	92 9f       	mul	r25, r18
    10b6:	f0 0d       	add	r31, r0
    10b8:	83 9f       	mul	r24, r19
    10ba:	f0 0d       	add	r31, r0
    10bc:	74 9f       	mul	r23, r20
    10be:	f0 0d       	add	r31, r0
    10c0:	65 9f       	mul	r22, r21
    10c2:	f0 0d       	add	r31, r0
    10c4:	99 27       	eor	r25, r25
    10c6:	72 9f       	mul	r23, r18
    10c8:	b0 0d       	add	r27, r0
    10ca:	e1 1d       	adc	r30, r1
    10cc:	f9 1f       	adc	r31, r25
    10ce:	63 9f       	mul	r22, r19
    10d0:	b0 0d       	add	r27, r0
    10d2:	e1 1d       	adc	r30, r1
    10d4:	f9 1f       	adc	r31, r25
    10d6:	bd 01       	movw	r22, r26
    10d8:	cf 01       	movw	r24, r30
    10da:	11 24       	eor	r1, r1
    10dc:	08 95       	ret

000010de <__udivmodsi4>:
    10de:	a1 e2       	ldi	r26, 0x21	; 33
    10e0:	1a 2e       	mov	r1, r26
    10e2:	aa 1b       	sub	r26, r26
    10e4:	bb 1b       	sub	r27, r27
    10e6:	fd 01       	movw	r30, r26
    10e8:	0d c0       	rjmp	.+26     	; 0x1104 <__udivmodsi4_ep>

000010ea <__udivmodsi4_loop>:
    10ea:	aa 1f       	adc	r26, r26
    10ec:	bb 1f       	adc	r27, r27
    10ee:	ee 1f       	adc	r30, r30
    10f0:	ff 1f       	adc	r31, r31
    10f2:	a2 17       	cp	r26, r18
    10f4:	b3 07       	cpc	r27, r19
    10f6:	e4 07       	cpc	r30, r20
    10f8:	f5 07       	cpc	r31, r21
    10fa:	20 f0       	brcs	.+8      	; 0x1104 <__udivmodsi4_ep>
    10fc:	a2 1b       	sub	r26, r18
    10fe:	b3 0b       	sbc	r27, r19
    1100:	e4 0b       	sbc	r30, r20
    1102:	f5 0b       	sbc	r31, r21

00001104 <__udivmodsi4_ep>:
    1104:	66 1f       	adc	r22, r22
    1106:	77 1f       	adc	r23, r23
    1108:	88 1f       	adc	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	1a 94       	dec	r1
    110e:	69 f7       	brne	.-38     	; 0x10ea <__udivmodsi4_loop>
    1110:	60 95       	com	r22
    1112:	70 95       	com	r23
    1114:	80 95       	com	r24
    1116:	90 95       	com	r25
    1118:	9b 01       	movw	r18, r22
    111a:	ac 01       	movw	r20, r24
    111c:	bd 01       	movw	r22, r26
    111e:	cf 01       	movw	r24, r30
    1120:	08 95       	ret

00001122 <__divmodsi4>:
    1122:	97 fb       	bst	r25, 7
    1124:	09 2e       	mov	r0, r25
    1126:	05 26       	eor	r0, r21
    1128:	0e d0       	rcall	.+28     	; 0x1146 <__divmodsi4_neg1>
    112a:	57 fd       	sbrc	r21, 7
    112c:	04 d0       	rcall	.+8      	; 0x1136 <__divmodsi4_neg2>
    112e:	d7 df       	rcall	.-82     	; 0x10de <__udivmodsi4>
    1130:	0a d0       	rcall	.+20     	; 0x1146 <__divmodsi4_neg1>
    1132:	00 1c       	adc	r0, r0
    1134:	38 f4       	brcc	.+14     	; 0x1144 <__divmodsi4_exit>

00001136 <__divmodsi4_neg2>:
    1136:	50 95       	com	r21
    1138:	40 95       	com	r20
    113a:	30 95       	com	r19
    113c:	21 95       	neg	r18
    113e:	3f 4f       	sbci	r19, 0xFF	; 255
    1140:	4f 4f       	sbci	r20, 0xFF	; 255
    1142:	5f 4f       	sbci	r21, 0xFF	; 255

00001144 <__divmodsi4_exit>:
    1144:	08 95       	ret

00001146 <__divmodsi4_neg1>:
    1146:	f6 f7       	brtc	.-4      	; 0x1144 <__divmodsi4_exit>
    1148:	90 95       	com	r25
    114a:	80 95       	com	r24
    114c:	70 95       	com	r23
    114e:	61 95       	neg	r22
    1150:	7f 4f       	sbci	r23, 0xFF	; 255
    1152:	8f 4f       	sbci	r24, 0xFF	; 255
    1154:	9f 4f       	sbci	r25, 0xFF	; 255
    1156:	08 95       	ret

00001158 <_exit>:
    1158:	f8 94       	cli

0000115a <__stop_program>:
    115a:	ff cf       	rjmp	.-2      	; 0x115a <__stop_program>
