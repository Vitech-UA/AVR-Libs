
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000005e2  00000656  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000068c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000006c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000df3  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000834  00000000  00000000  0000155b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000064f  00000000  00000000  00001d8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  000023e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000425  00000000  00000000  000024e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000520  00000000  00000000  00002905  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002e25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ee       	ldi	r30, 0xE2	; 226
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  7a:	0c 94 ef 02 	jmp	0x5de	; 0x5de <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_Init>:
﻿#include "ADC.h"

void ADC_Init(void){
	
	ADCSRA |= (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); // Дозвіл використання АЦП + дільник на 128.
  82:	86 b1       	in	r24, 0x06	; 6
  84:	87 68       	ori	r24, 0x87	; 135
  86:	86 b9       	out	0x06, r24	; 6
	                                                      // 64кГц
	ADMUX |= (1<<REFS1)|(1<<REFS0); // Вмик. вн.Джерело Опорної напруги = 2.56В, вхід ADC0
  88:	87 b1       	in	r24, 0x07	; 7
  8a:	80 6c       	ori	r24, 0xC0	; 192
  8c:	87 b9       	out	0x07, r24	; 7
  8e:	08 95       	ret

00000090 <ADC_Convert>:

}

unsigned int ADC_Convert(void){
	
	ADCSRA |= (1<<ADSC); //Запускаємо перетворення
  90:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA & (1<<ADSC))); // Чекаємо завершення перетворення
  92:	36 99       	sbic	0x06, 6	; 6
  94:	fe cf       	rjmp	.-4      	; 0x92 <ADC_Convert+0x2>
	return(unsigned int) ADC;
  96:	84 b1       	in	r24, 0x04	; 4
  98:	95 b1       	in	r25, 0x05	; 5
	
  9a:	08 95       	ret

0000009c <main>:
int main(void)
{
	unsigned int ADC_value = 0;
	float n;
	char LCD_Buffer[4];
	ADC_Init();
  9c:	0e 94 41 00 	call	0x82	; 0x82 <ADC_Init>
	LCD_Init();
  a0:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_Init>
	LCD_Clear();
  a4:	0e 94 48 01 	call	0x290	; 0x290 <LCD_Clear>
	  
	  LCD_gotoxy(8,0);
	  n=(float)ADC_value/400;
	  SendChar((unsigned char)n+0x30);
	  SendChar('.');
	  SendChar(((unsigned char)(n*10))%10 + 0x30);
  a8:	cd ec       	ldi	r28, 0xCD	; 205
	LCD_Clear();
	
    while(1)
    {
	  
      ADC_value = ADC_Convert(); 
  aa:	0e 94 48 00 	call	0x90	; 0x90 <ADC_Convert>
  ae:	7c 01       	movw	r14, r24
	  LCD_gotoxy(0,0);
  b0:	60 e0       	ldi	r22, 0x00	; 0
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	0e 94 30 01 	call	0x260	; 0x260 <LCD_gotoxy>
	  LCD_Print("Пр");
  b8:	80 e6       	ldi	r24, 0x60	; 96
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 39 01 	call	0x272	; 0x272 <LCD_Print>
	  //SendChar(ADC_value/1000 + 0x30);
	  //SendChar((ADC_value%1000)/100 + 0x30);
	  //SendChar((ADC_value/100)/ 10 + 0x30);
	  //SendChar(ADC_value%10 + 0x30);
	  
	  LCD_gotoxy(8,0);
  c0:	60 e0       	ldi	r22, 0x00	; 0
  c2:	88 e0       	ldi	r24, 0x08	; 8
  c4:	0e 94 30 01 	call	0x260	; 0x260 <LCD_gotoxy>
	  n=(float)ADC_value/400;
  c8:	b7 01       	movw	r22, r14
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <__floatunsisf>
  d2:	20 e0       	ldi	r18, 0x00	; 0
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	48 ec       	ldi	r20, 0xC8	; 200
  d8:	53 e4       	ldi	r21, 0x43	; 67
  da:	0e 94 53 01 	call	0x2a6	; 0x2a6 <__divsf3>
  de:	6b 01       	movw	r12, r22
  e0:	7c 01       	movw	r14, r24
	  SendChar((unsigned char)n+0x30);
  e2:	0e 94 c5 01 	call	0x38a	; 0x38a <__fixunssfsi>
  e6:	80 e3       	ldi	r24, 0x30	; 48
  e8:	86 0f       	add	r24, r22
  ea:	0e 94 2c 01 	call	0x258	; 0x258 <SendChar>
	  SendChar('.');
  ee:	8e e2       	ldi	r24, 0x2E	; 46
  f0:	0e 94 2c 01 	call	0x258	; 0x258 <SendChar>
	  SendChar(((unsigned char)(n*10))%10 + 0x30);
  f4:	20 e0       	ldi	r18, 0x00	; 0
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	40 e2       	ldi	r20, 0x20	; 32
  fa:	51 e4       	ldi	r21, 0x41	; 65
  fc:	c7 01       	movw	r24, r14
  fe:	b6 01       	movw	r22, r12
 100:	0e 94 82 02 	call	0x504	; 0x504 <__mulsf3>
 104:	0e 94 c5 01 	call	0x38a	; 0x38a <__fixunssfsi>
 108:	6c 9f       	mul	r22, r28
 10a:	91 2d       	mov	r25, r1
 10c:	11 24       	eor	r1, r1
 10e:	96 95       	lsr	r25
 110:	96 95       	lsr	r25
 112:	96 95       	lsr	r25
 114:	99 0f       	add	r25, r25
 116:	89 2f       	mov	r24, r25
 118:	88 0f       	add	r24, r24
 11a:	88 0f       	add	r24, r24
 11c:	98 0f       	add	r25, r24
 11e:	86 2f       	mov	r24, r22
 120:	89 1b       	sub	r24, r25
 122:	80 5d       	subi	r24, 0xD0	; 208
 124:	0e 94 2c 01 	call	0x258	; 0x258 <SendChar>
	  SendChar(((unsigned char)(n*100))%10 + 0x30);
 128:	20 e0       	ldi	r18, 0x00	; 0
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	48 ec       	ldi	r20, 0xC8	; 200
 12e:	52 e4       	ldi	r21, 0x42	; 66
 130:	c7 01       	movw	r24, r14
 132:	b6 01       	movw	r22, r12
 134:	0e 94 82 02 	call	0x504	; 0x504 <__mulsf3>
 138:	0e 94 c5 01 	call	0x38a	; 0x38a <__fixunssfsi>
 13c:	6c 9f       	mul	r22, r28
 13e:	91 2d       	mov	r25, r1
 140:	11 24       	eor	r1, r1
 142:	96 95       	lsr	r25
 144:	96 95       	lsr	r25
 146:	96 95       	lsr	r25
 148:	99 0f       	add	r25, r25
 14a:	89 2f       	mov	r24, r25
 14c:	88 0f       	add	r24, r24
 14e:	88 0f       	add	r24, r24
 150:	98 0f       	add	r25, r24
 152:	86 2f       	mov	r24, r22
 154:	89 1b       	sub	r24, r25
 156:	80 5d       	subi	r24, 0xD0	; 208
 158:	0e 94 2c 01 	call	0x258	; 0x258 <SendChar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	2f ef       	ldi	r18, 0xFF	; 255
 15e:	84 e3       	ldi	r24, 0x34	; 52
 160:	9c e0       	ldi	r25, 0x0C	; 12
 162:	21 50       	subi	r18, 0x01	; 1
 164:	80 40       	sbci	r24, 0x00	; 0
 166:	90 40       	sbci	r25, 0x00	; 0
 168:	e1 f7       	brne	.-8      	; 0x162 <main+0xc6>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <main+0xd0>
 16c:	00 00       	nop
 16e:	9d cf       	rjmp	.-198    	; 0xaa <main+0xe>

00000170 <Port_Init>:



void Port_Init(void)
{
	LCD_PORT = 0x00;
 170:	18 ba       	out	0x18, r1	; 24
	DDR_LCD_PORT = 0xFF;
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	87 bb       	out	0x17, r24	; 23
 176:	08 95       	ret

00000178 <SendHalfByte>:

}
void SendHalfByte(unsigned char c)
{
	c<<=4;
	E1; //Установка лінії Е в 1.
 178:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17a:	e7 ee       	ldi	r30, 0xE7	; 231
 17c:	f3 e0       	ldi	r31, 0x03	; 3
 17e:	31 97       	sbiw	r30, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <SendHalfByte+0x6>
 182:	00 c0       	rjmp	.+0      	; 0x184 <SendHalfByte+0xc>
 184:	00 00       	nop
	_delay_us(50);
	LCD_PORT &= 0b00001111; // Зтираємо інформація на шині даних
 186:	98 b3       	in	r25, 0x18	; 24
 188:	9f 70       	andi	r25, 0x0F	; 15
 18a:	98 bb       	out	0x18, r25	; 24
	LCD_PORT |= c;
 18c:	98 b3       	in	r25, 0x18	; 24
 18e:	82 95       	swap	r24
 190:	80 7f       	andi	r24, 0xF0	; 240
 192:	89 2b       	or	r24, r25
 194:	88 bb       	out	0x18, r24	; 24
	E0; //Установка лінії Е в 0.
 196:	c3 98       	cbi	0x18, 3	; 24
 198:	87 ee       	ldi	r24, 0xE7	; 231
 19a:	93 e0       	ldi	r25, 0x03	; 3
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <SendHalfByte+0x24>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <SendHalfByte+0x2a>
 1a2:	00 00       	nop
 1a4:	08 95       	ret

000001a6 <SendByte>:
	_delay_us(50);
}
void SendByte(unsigned char c, unsigned char mode)
{
 1a6:	cf 93       	push	r28
 1a8:	c8 2f       	mov	r28, r24
	if(mode == 0) RS0;
 1aa:	61 11       	cpse	r22, r1
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <SendByte+0xc>
 1ae:	c2 98       	cbi	0x18, 2	; 24
 1b0:	01 c0       	rjmp	.+2      	; 0x1b4 <SendByte+0xe>
	else RS1;
 1b2:	c2 9a       	sbi	0x18, 2	; 24
	unsigned char hc=0;
	hc = c>>4;
	SendHalfByte(hc);
 1b4:	8c 2f       	mov	r24, r28
 1b6:	82 95       	swap	r24
 1b8:	8f 70       	andi	r24, 0x0F	; 15
 1ba:	0e 94 bc 00 	call	0x178	; 0x178 <SendHalfByte>
	SendHalfByte(c);
 1be:	8c 2f       	mov	r24, r28
 1c0:	0e 94 bc 00 	call	0x178	; 0x178 <SendHalfByte>
	
}
 1c4:	cf 91       	pop	r28
 1c6:	08 95       	ret

000001c8 <LCD_Init>:
	DDR_LCD_PORT = 0xFF;
	
}
void LCD_Init(void)
{
	Port_Init();
 1c8:	0e 94 b8 00 	call	0x170	; 0x170 <Port_Init>
	SendHalfByte(0b00000011);
 1cc:	83 e0       	ldi	r24, 0x03	; 3
 1ce:	0e 94 bc 00 	call	0x178	; 0x178 <SendHalfByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d2:	2f ef       	ldi	r18, 0xFF	; 255
 1d4:	89 ef       	ldi	r24, 0xF9	; 249
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	21 50       	subi	r18, 0x01	; 1
 1da:	80 40       	sbci	r24, 0x00	; 0
 1dc:	90 40       	sbci	r25, 0x00	; 0
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <LCD_Init+0x10>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <LCD_Init+0x1a>
 1e2:	00 00       	nop
	_delay_ms(4);
	SendHalfByte(0b00000011);
 1e4:	83 e0       	ldi	r24, 0x03	; 3
 1e6:	0e 94 bc 00 	call	0x178	; 0x178 <SendHalfByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ea:	8f ec       	ldi	r24, 0xCF	; 207
 1ec:	97 e0       	ldi	r25, 0x07	; 7
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <LCD_Init+0x26>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <LCD_Init+0x2c>
 1f4:	00 00       	nop
	_delay_us(100);
	SendHalfByte(0b00000011);
 1f6:	83 e0       	ldi	r24, 0x03	; 3
 1f8:	0e 94 bc 00 	call	0x178	; 0x178 <SendHalfByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fc:	8f e1       	ldi	r24, 0x1F	; 31
 1fe:	9e e4       	ldi	r25, 0x4E	; 78
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <LCD_Init+0x38>
 204:	00 c0       	rjmp	.+0      	; 0x206 <LCD_Init+0x3e>
 206:	00 00       	nop
	_delay_ms(1);
	SendHalfByte(0b00000010);
 208:	82 e0       	ldi	r24, 0x02	; 2
 20a:	0e 94 bc 00 	call	0x178	; 0x178 <SendHalfByte>
 20e:	8f e1       	ldi	r24, 0x1F	; 31
 210:	9e e4       	ldi	r25, 0x4E	; 78
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <LCD_Init+0x4a>
 216:	00 c0       	rjmp	.+0      	; 0x218 <LCD_Init+0x50>
 218:	00 00       	nop
	_delay_ms(1);
	SendByte(0b00101000,0);// Вмикаємо 4-бітний режим (N=1)
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	88 e2       	ldi	r24, 0x28	; 40
 21e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <SendByte>
 222:	8f e1       	ldi	r24, 0x1F	; 31
 224:	9e e4       	ldi	r25, 0x4E	; 78
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <LCD_Init+0x5e>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <LCD_Init+0x64>
 22c:	00 00       	nop
	_delay_ms(1);
	SendByte(0b00001100,0);//Вмикаємо зображення (D=1), курсори не вмикаємо
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	8c e0       	ldi	r24, 0x0C	; 12
 232:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <SendByte>
 236:	8f e1       	ldi	r24, 0x1F	; 31
 238:	9e e4       	ldi	r25, 0x4E	; 78
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <LCD_Init+0x72>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <LCD_Init+0x78>
 240:	00 00       	nop
	_delay_ms(1);
	SendByte(0b00000110,0);//Змушуємо курсор рухатись зправа на ліво.
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	86 e0       	ldi	r24, 0x06	; 6
 246:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <SendByte>
 24a:	8f e1       	ldi	r24, 0x1F	; 31
 24c:	9e e4       	ldi	r25, 0x4E	; 78
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <LCD_Init+0x86>
 252:	00 c0       	rjmp	.+0      	; 0x254 <LCD_Init+0x8c>
 254:	00 00       	nop
 256:	08 95       	ret

00000258 <SendChar>:
	SendHalfByte(c);
	
}
void SendChar(unsigned char c)
{
	SendByte(c,1);
 258:	61 e0       	ldi	r22, 0x01	; 1
 25a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <SendByte>
 25e:	08 95       	ret

00000260 <LCD_gotoxy>:
}
void LCD_gotoxy(unsigned char x, unsigned char y)
{
	char adress;
	adress = (0x40*y+x)| 0b10000000;
	SendByte(adress,0);
 260:	90 e4       	ldi	r25, 0x40	; 64
 262:	69 9f       	mul	r22, r25
 264:	80 0d       	add	r24, r0
 266:	11 24       	eor	r1, r1
 268:	60 e0       	ldi	r22, 0x00	; 0
 26a:	80 68       	ori	r24, 0x80	; 128
 26c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <SendByte>
 270:	08 95       	ret

00000272 <LCD_Print>:
}
void LCD_Print(char str1[])
{
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	ec 01       	movw	r28, r24
	wchar_t n;
	for(n=0;str1[n]!='\0';n++)
 278:	88 81       	ld	r24, Y
 27a:	88 23       	and	r24, r24
 27c:	31 f0       	breq	.+12     	; 0x28a <LCD_Print+0x18>
 27e:	21 96       	adiw	r28, 0x01	; 1
	SendChar(str1[n]);
 280:	0e 94 2c 01 	call	0x258	; 0x258 <SendChar>
	SendByte(adress,0);
}
void LCD_Print(char str1[])
{
	wchar_t n;
	for(n=0;str1[n]!='\0';n++)
 284:	89 91       	ld	r24, Y+
 286:	81 11       	cpse	r24, r1
 288:	fb cf       	rjmp	.-10     	; 0x280 <LCD_Print+0xe>
	SendChar(str1[n]);
	
}
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	08 95       	ret

00000290 <LCD_Clear>:
void LCD_Clear(void)
{
	SendByte(0b00000001,0);
 290:	60 e0       	ldi	r22, 0x00	; 0
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <SendByte>
 298:	8f e3       	ldi	r24, 0x3F	; 63
 29a:	9c e9       	ldi	r25, 0x9C	; 156
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <LCD_Clear+0xc>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <LCD_Clear+0x12>
 2a2:	00 00       	nop
 2a4:	08 95       	ret

000002a6 <__divsf3>:
 2a6:	0e 94 67 01 	call	0x2ce	; 0x2ce <__divsf3x>
 2aa:	0c 94 48 02 	jmp	0x490	; 0x490 <__fp_round>
 2ae:	0e 94 41 02 	call	0x482	; 0x482 <__fp_pscB>
 2b2:	58 f0       	brcs	.+22     	; 0x2ca <__divsf3+0x24>
 2b4:	0e 94 3a 02 	call	0x474	; 0x474 <__fp_pscA>
 2b8:	40 f0       	brcs	.+16     	; 0x2ca <__divsf3+0x24>
 2ba:	29 f4       	brne	.+10     	; 0x2c6 <__divsf3+0x20>
 2bc:	5f 3f       	cpi	r21, 0xFF	; 255
 2be:	29 f0       	breq	.+10     	; 0x2ca <__divsf3+0x24>
 2c0:	0c 94 31 02 	jmp	0x462	; 0x462 <__fp_inf>
 2c4:	51 11       	cpse	r21, r1
 2c6:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <__fp_szero>
 2ca:	0c 94 37 02 	jmp	0x46e	; 0x46e <__fp_nan>

000002ce <__divsf3x>:
 2ce:	0e 94 59 02 	call	0x4b2	; 0x4b2 <__fp_split3>
 2d2:	68 f3       	brcs	.-38     	; 0x2ae <__divsf3+0x8>

000002d4 <__divsf3_pse>:
 2d4:	99 23       	and	r25, r25
 2d6:	b1 f3       	breq	.-20     	; 0x2c4 <__divsf3+0x1e>
 2d8:	55 23       	and	r21, r21
 2da:	91 f3       	breq	.-28     	; 0x2c0 <__divsf3+0x1a>
 2dc:	95 1b       	sub	r25, r21
 2de:	55 0b       	sbc	r21, r21
 2e0:	bb 27       	eor	r27, r27
 2e2:	aa 27       	eor	r26, r26
 2e4:	62 17       	cp	r22, r18
 2e6:	73 07       	cpc	r23, r19
 2e8:	84 07       	cpc	r24, r20
 2ea:	38 f0       	brcs	.+14     	; 0x2fa <__divsf3_pse+0x26>
 2ec:	9f 5f       	subi	r25, 0xFF	; 255
 2ee:	5f 4f       	sbci	r21, 0xFF	; 255
 2f0:	22 0f       	add	r18, r18
 2f2:	33 1f       	adc	r19, r19
 2f4:	44 1f       	adc	r20, r20
 2f6:	aa 1f       	adc	r26, r26
 2f8:	a9 f3       	breq	.-22     	; 0x2e4 <__divsf3_pse+0x10>
 2fa:	35 d0       	rcall	.+106    	; 0x366 <__divsf3_pse+0x92>
 2fc:	0e 2e       	mov	r0, r30
 2fe:	3a f0       	brmi	.+14     	; 0x30e <__divsf3_pse+0x3a>
 300:	e0 e8       	ldi	r30, 0x80	; 128
 302:	32 d0       	rcall	.+100    	; 0x368 <__divsf3_pse+0x94>
 304:	91 50       	subi	r25, 0x01	; 1
 306:	50 40       	sbci	r21, 0x00	; 0
 308:	e6 95       	lsr	r30
 30a:	00 1c       	adc	r0, r0
 30c:	ca f7       	brpl	.-14     	; 0x300 <__divsf3_pse+0x2c>
 30e:	2b d0       	rcall	.+86     	; 0x366 <__divsf3_pse+0x92>
 310:	fe 2f       	mov	r31, r30
 312:	29 d0       	rcall	.+82     	; 0x366 <__divsf3_pse+0x92>
 314:	66 0f       	add	r22, r22
 316:	77 1f       	adc	r23, r23
 318:	88 1f       	adc	r24, r24
 31a:	bb 1f       	adc	r27, r27
 31c:	26 17       	cp	r18, r22
 31e:	37 07       	cpc	r19, r23
 320:	48 07       	cpc	r20, r24
 322:	ab 07       	cpc	r26, r27
 324:	b0 e8       	ldi	r27, 0x80	; 128
 326:	09 f0       	breq	.+2      	; 0x32a <__divsf3_pse+0x56>
 328:	bb 0b       	sbc	r27, r27
 32a:	80 2d       	mov	r24, r0
 32c:	bf 01       	movw	r22, r30
 32e:	ff 27       	eor	r31, r31
 330:	93 58       	subi	r25, 0x83	; 131
 332:	5f 4f       	sbci	r21, 0xFF	; 255
 334:	3a f0       	brmi	.+14     	; 0x344 <__divsf3_pse+0x70>
 336:	9e 3f       	cpi	r25, 0xFE	; 254
 338:	51 05       	cpc	r21, r1
 33a:	78 f0       	brcs	.+30     	; 0x35a <__divsf3_pse+0x86>
 33c:	0c 94 31 02 	jmp	0x462	; 0x462 <__fp_inf>
 340:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <__fp_szero>
 344:	5f 3f       	cpi	r21, 0xFF	; 255
 346:	e4 f3       	brlt	.-8      	; 0x340 <__divsf3_pse+0x6c>
 348:	98 3e       	cpi	r25, 0xE8	; 232
 34a:	d4 f3       	brlt	.-12     	; 0x340 <__divsf3_pse+0x6c>
 34c:	86 95       	lsr	r24
 34e:	77 95       	ror	r23
 350:	67 95       	ror	r22
 352:	b7 95       	ror	r27
 354:	f7 95       	ror	r31
 356:	9f 5f       	subi	r25, 0xFF	; 255
 358:	c9 f7       	brne	.-14     	; 0x34c <__divsf3_pse+0x78>
 35a:	88 0f       	add	r24, r24
 35c:	91 1d       	adc	r25, r1
 35e:	96 95       	lsr	r25
 360:	87 95       	ror	r24
 362:	97 f9       	bld	r25, 7
 364:	08 95       	ret
 366:	e1 e0       	ldi	r30, 0x01	; 1
 368:	66 0f       	add	r22, r22
 36a:	77 1f       	adc	r23, r23
 36c:	88 1f       	adc	r24, r24
 36e:	bb 1f       	adc	r27, r27
 370:	62 17       	cp	r22, r18
 372:	73 07       	cpc	r23, r19
 374:	84 07       	cpc	r24, r20
 376:	ba 07       	cpc	r27, r26
 378:	20 f0       	brcs	.+8      	; 0x382 <__divsf3_pse+0xae>
 37a:	62 1b       	sub	r22, r18
 37c:	73 0b       	sbc	r23, r19
 37e:	84 0b       	sbc	r24, r20
 380:	ba 0b       	sbc	r27, r26
 382:	ee 1f       	adc	r30, r30
 384:	88 f7       	brcc	.-30     	; 0x368 <__divsf3_pse+0x94>
 386:	e0 95       	com	r30
 388:	08 95       	ret

0000038a <__fixunssfsi>:
 38a:	0e 94 61 02 	call	0x4c2	; 0x4c2 <__fp_splitA>
 38e:	88 f0       	brcs	.+34     	; 0x3b2 <__fixunssfsi+0x28>
 390:	9f 57       	subi	r25, 0x7F	; 127
 392:	98 f0       	brcs	.+38     	; 0x3ba <__fixunssfsi+0x30>
 394:	b9 2f       	mov	r27, r25
 396:	99 27       	eor	r25, r25
 398:	b7 51       	subi	r27, 0x17	; 23
 39a:	b0 f0       	brcs	.+44     	; 0x3c8 <__fixunssfsi+0x3e>
 39c:	e1 f0       	breq	.+56     	; 0x3d6 <__fixunssfsi+0x4c>
 39e:	66 0f       	add	r22, r22
 3a0:	77 1f       	adc	r23, r23
 3a2:	88 1f       	adc	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	1a f0       	brmi	.+6      	; 0x3ae <__fixunssfsi+0x24>
 3a8:	ba 95       	dec	r27
 3aa:	c9 f7       	brne	.-14     	; 0x39e <__fixunssfsi+0x14>
 3ac:	14 c0       	rjmp	.+40     	; 0x3d6 <__fixunssfsi+0x4c>
 3ae:	b1 30       	cpi	r27, 0x01	; 1
 3b0:	91 f0       	breq	.+36     	; 0x3d6 <__fixunssfsi+0x4c>
 3b2:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__fp_zero>
 3b6:	b1 e0       	ldi	r27, 0x01	; 1
 3b8:	08 95       	ret
 3ba:	0c 94 7b 02 	jmp	0x4f6	; 0x4f6 <__fp_zero>
 3be:	67 2f       	mov	r22, r23
 3c0:	78 2f       	mov	r23, r24
 3c2:	88 27       	eor	r24, r24
 3c4:	b8 5f       	subi	r27, 0xF8	; 248
 3c6:	39 f0       	breq	.+14     	; 0x3d6 <__fixunssfsi+0x4c>
 3c8:	b9 3f       	cpi	r27, 0xF9	; 249
 3ca:	cc f3       	brlt	.-14     	; 0x3be <__fixunssfsi+0x34>
 3cc:	86 95       	lsr	r24
 3ce:	77 95       	ror	r23
 3d0:	67 95       	ror	r22
 3d2:	b3 95       	inc	r27
 3d4:	d9 f7       	brne	.-10     	; 0x3cc <__fixunssfsi+0x42>
 3d6:	3e f4       	brtc	.+14     	; 0x3e6 <__fixunssfsi+0x5c>
 3d8:	90 95       	com	r25
 3da:	80 95       	com	r24
 3dc:	70 95       	com	r23
 3de:	61 95       	neg	r22
 3e0:	7f 4f       	sbci	r23, 0xFF	; 255
 3e2:	8f 4f       	sbci	r24, 0xFF	; 255
 3e4:	9f 4f       	sbci	r25, 0xFF	; 255
 3e6:	08 95       	ret

000003e8 <__floatunsisf>:
 3e8:	e8 94       	clt
 3ea:	09 c0       	rjmp	.+18     	; 0x3fe <__floatsisf+0x12>

000003ec <__floatsisf>:
 3ec:	97 fb       	bst	r25, 7
 3ee:	3e f4       	brtc	.+14     	; 0x3fe <__floatsisf+0x12>
 3f0:	90 95       	com	r25
 3f2:	80 95       	com	r24
 3f4:	70 95       	com	r23
 3f6:	61 95       	neg	r22
 3f8:	7f 4f       	sbci	r23, 0xFF	; 255
 3fa:	8f 4f       	sbci	r24, 0xFF	; 255
 3fc:	9f 4f       	sbci	r25, 0xFF	; 255
 3fe:	99 23       	and	r25, r25
 400:	a9 f0       	breq	.+42     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 402:	f9 2f       	mov	r31, r25
 404:	96 e9       	ldi	r25, 0x96	; 150
 406:	bb 27       	eor	r27, r27
 408:	93 95       	inc	r25
 40a:	f6 95       	lsr	r31
 40c:	87 95       	ror	r24
 40e:	77 95       	ror	r23
 410:	67 95       	ror	r22
 412:	b7 95       	ror	r27
 414:	f1 11       	cpse	r31, r1
 416:	f8 cf       	rjmp	.-16     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 418:	fa f4       	brpl	.+62     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 41a:	bb 0f       	add	r27, r27
 41c:	11 f4       	brne	.+4      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 41e:	60 ff       	sbrs	r22, 0
 420:	1b c0       	rjmp	.+54     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 422:	6f 5f       	subi	r22, 0xFF	; 255
 424:	7f 4f       	sbci	r23, 0xFF	; 255
 426:	8f 4f       	sbci	r24, 0xFF	; 255
 428:	9f 4f       	sbci	r25, 0xFF	; 255
 42a:	16 c0       	rjmp	.+44     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 42c:	88 23       	and	r24, r24
 42e:	11 f0       	breq	.+4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 430:	96 e9       	ldi	r25, 0x96	; 150
 432:	11 c0       	rjmp	.+34     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 434:	77 23       	and	r23, r23
 436:	21 f0       	breq	.+8      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 438:	9e e8       	ldi	r25, 0x8E	; 142
 43a:	87 2f       	mov	r24, r23
 43c:	76 2f       	mov	r23, r22
 43e:	05 c0       	rjmp	.+10     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 440:	66 23       	and	r22, r22
 442:	71 f0       	breq	.+28     	; 0x460 <__stack+0x1>
 444:	96 e8       	ldi	r25, 0x86	; 134
 446:	86 2f       	mov	r24, r22
 448:	70 e0       	ldi	r23, 0x00	; 0
 44a:	60 e0       	ldi	r22, 0x00	; 0
 44c:	2a f0       	brmi	.+10     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 44e:	9a 95       	dec	r25
 450:	66 0f       	add	r22, r22
 452:	77 1f       	adc	r23, r23
 454:	88 1f       	adc	r24, r24
 456:	da f7       	brpl	.-10     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 458:	88 0f       	add	r24, r24
 45a:	96 95       	lsr	r25
 45c:	87 95       	ror	r24
 45e:	97 f9       	bld	r25, 7
 460:	08 95       	ret

00000462 <__fp_inf>:
 462:	97 f9       	bld	r25, 7
 464:	9f 67       	ori	r25, 0x7F	; 127
 466:	80 e8       	ldi	r24, 0x80	; 128
 468:	70 e0       	ldi	r23, 0x00	; 0
 46a:	60 e0       	ldi	r22, 0x00	; 0
 46c:	08 95       	ret

0000046e <__fp_nan>:
 46e:	9f ef       	ldi	r25, 0xFF	; 255
 470:	80 ec       	ldi	r24, 0xC0	; 192
 472:	08 95       	ret

00000474 <__fp_pscA>:
 474:	00 24       	eor	r0, r0
 476:	0a 94       	dec	r0
 478:	16 16       	cp	r1, r22
 47a:	17 06       	cpc	r1, r23
 47c:	18 06       	cpc	r1, r24
 47e:	09 06       	cpc	r0, r25
 480:	08 95       	ret

00000482 <__fp_pscB>:
 482:	00 24       	eor	r0, r0
 484:	0a 94       	dec	r0
 486:	12 16       	cp	r1, r18
 488:	13 06       	cpc	r1, r19
 48a:	14 06       	cpc	r1, r20
 48c:	05 06       	cpc	r0, r21
 48e:	08 95       	ret

00000490 <__fp_round>:
 490:	09 2e       	mov	r0, r25
 492:	03 94       	inc	r0
 494:	00 0c       	add	r0, r0
 496:	11 f4       	brne	.+4      	; 0x49c <__fp_round+0xc>
 498:	88 23       	and	r24, r24
 49a:	52 f0       	brmi	.+20     	; 0x4b0 <__fp_round+0x20>
 49c:	bb 0f       	add	r27, r27
 49e:	40 f4       	brcc	.+16     	; 0x4b0 <__fp_round+0x20>
 4a0:	bf 2b       	or	r27, r31
 4a2:	11 f4       	brne	.+4      	; 0x4a8 <__fp_round+0x18>
 4a4:	60 ff       	sbrs	r22, 0
 4a6:	04 c0       	rjmp	.+8      	; 0x4b0 <__fp_round+0x20>
 4a8:	6f 5f       	subi	r22, 0xFF	; 255
 4aa:	7f 4f       	sbci	r23, 0xFF	; 255
 4ac:	8f 4f       	sbci	r24, 0xFF	; 255
 4ae:	9f 4f       	sbci	r25, 0xFF	; 255
 4b0:	08 95       	ret

000004b2 <__fp_split3>:
 4b2:	57 fd       	sbrc	r21, 7
 4b4:	90 58       	subi	r25, 0x80	; 128
 4b6:	44 0f       	add	r20, r20
 4b8:	55 1f       	adc	r21, r21
 4ba:	59 f0       	breq	.+22     	; 0x4d2 <__fp_splitA+0x10>
 4bc:	5f 3f       	cpi	r21, 0xFF	; 255
 4be:	71 f0       	breq	.+28     	; 0x4dc <__fp_splitA+0x1a>
 4c0:	47 95       	ror	r20

000004c2 <__fp_splitA>:
 4c2:	88 0f       	add	r24, r24
 4c4:	97 fb       	bst	r25, 7
 4c6:	99 1f       	adc	r25, r25
 4c8:	61 f0       	breq	.+24     	; 0x4e2 <__fp_splitA+0x20>
 4ca:	9f 3f       	cpi	r25, 0xFF	; 255
 4cc:	79 f0       	breq	.+30     	; 0x4ec <__fp_splitA+0x2a>
 4ce:	87 95       	ror	r24
 4d0:	08 95       	ret
 4d2:	12 16       	cp	r1, r18
 4d4:	13 06       	cpc	r1, r19
 4d6:	14 06       	cpc	r1, r20
 4d8:	55 1f       	adc	r21, r21
 4da:	f2 cf       	rjmp	.-28     	; 0x4c0 <__fp_split3+0xe>
 4dc:	46 95       	lsr	r20
 4de:	f1 df       	rcall	.-30     	; 0x4c2 <__fp_splitA>
 4e0:	08 c0       	rjmp	.+16     	; 0x4f2 <__fp_splitA+0x30>
 4e2:	16 16       	cp	r1, r22
 4e4:	17 06       	cpc	r1, r23
 4e6:	18 06       	cpc	r1, r24
 4e8:	99 1f       	adc	r25, r25
 4ea:	f1 cf       	rjmp	.-30     	; 0x4ce <__fp_splitA+0xc>
 4ec:	86 95       	lsr	r24
 4ee:	71 05       	cpc	r23, r1
 4f0:	61 05       	cpc	r22, r1
 4f2:	08 94       	sec
 4f4:	08 95       	ret

000004f6 <__fp_zero>:
 4f6:	e8 94       	clt

000004f8 <__fp_szero>:
 4f8:	bb 27       	eor	r27, r27
 4fa:	66 27       	eor	r22, r22
 4fc:	77 27       	eor	r23, r23
 4fe:	cb 01       	movw	r24, r22
 500:	97 f9       	bld	r25, 7
 502:	08 95       	ret

00000504 <__mulsf3>:
 504:	0e 94 95 02 	call	0x52a	; 0x52a <__mulsf3x>
 508:	0c 94 48 02 	jmp	0x490	; 0x490 <__fp_round>
 50c:	0e 94 3a 02 	call	0x474	; 0x474 <__fp_pscA>
 510:	38 f0       	brcs	.+14     	; 0x520 <__mulsf3+0x1c>
 512:	0e 94 41 02 	call	0x482	; 0x482 <__fp_pscB>
 516:	20 f0       	brcs	.+8      	; 0x520 <__mulsf3+0x1c>
 518:	95 23       	and	r25, r21
 51a:	11 f0       	breq	.+4      	; 0x520 <__mulsf3+0x1c>
 51c:	0c 94 31 02 	jmp	0x462	; 0x462 <__fp_inf>
 520:	0c 94 37 02 	jmp	0x46e	; 0x46e <__fp_nan>
 524:	11 24       	eor	r1, r1
 526:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <__fp_szero>

0000052a <__mulsf3x>:
 52a:	0e 94 59 02 	call	0x4b2	; 0x4b2 <__fp_split3>
 52e:	70 f3       	brcs	.-36     	; 0x50c <__mulsf3+0x8>

00000530 <__mulsf3_pse>:
 530:	95 9f       	mul	r25, r21
 532:	c1 f3       	breq	.-16     	; 0x524 <__mulsf3+0x20>
 534:	95 0f       	add	r25, r21
 536:	50 e0       	ldi	r21, 0x00	; 0
 538:	55 1f       	adc	r21, r21
 53a:	62 9f       	mul	r22, r18
 53c:	f0 01       	movw	r30, r0
 53e:	72 9f       	mul	r23, r18
 540:	bb 27       	eor	r27, r27
 542:	f0 0d       	add	r31, r0
 544:	b1 1d       	adc	r27, r1
 546:	63 9f       	mul	r22, r19
 548:	aa 27       	eor	r26, r26
 54a:	f0 0d       	add	r31, r0
 54c:	b1 1d       	adc	r27, r1
 54e:	aa 1f       	adc	r26, r26
 550:	64 9f       	mul	r22, r20
 552:	66 27       	eor	r22, r22
 554:	b0 0d       	add	r27, r0
 556:	a1 1d       	adc	r26, r1
 558:	66 1f       	adc	r22, r22
 55a:	82 9f       	mul	r24, r18
 55c:	22 27       	eor	r18, r18
 55e:	b0 0d       	add	r27, r0
 560:	a1 1d       	adc	r26, r1
 562:	62 1f       	adc	r22, r18
 564:	73 9f       	mul	r23, r19
 566:	b0 0d       	add	r27, r0
 568:	a1 1d       	adc	r26, r1
 56a:	62 1f       	adc	r22, r18
 56c:	83 9f       	mul	r24, r19
 56e:	a0 0d       	add	r26, r0
 570:	61 1d       	adc	r22, r1
 572:	22 1f       	adc	r18, r18
 574:	74 9f       	mul	r23, r20
 576:	33 27       	eor	r19, r19
 578:	a0 0d       	add	r26, r0
 57a:	61 1d       	adc	r22, r1
 57c:	23 1f       	adc	r18, r19
 57e:	84 9f       	mul	r24, r20
 580:	60 0d       	add	r22, r0
 582:	21 1d       	adc	r18, r1
 584:	82 2f       	mov	r24, r18
 586:	76 2f       	mov	r23, r22
 588:	6a 2f       	mov	r22, r26
 58a:	11 24       	eor	r1, r1
 58c:	9f 57       	subi	r25, 0x7F	; 127
 58e:	50 40       	sbci	r21, 0x00	; 0
 590:	9a f0       	brmi	.+38     	; 0x5b8 <__mulsf3_pse+0x88>
 592:	f1 f0       	breq	.+60     	; 0x5d0 <__mulsf3_pse+0xa0>
 594:	88 23       	and	r24, r24
 596:	4a f0       	brmi	.+18     	; 0x5aa <__mulsf3_pse+0x7a>
 598:	ee 0f       	add	r30, r30
 59a:	ff 1f       	adc	r31, r31
 59c:	bb 1f       	adc	r27, r27
 59e:	66 1f       	adc	r22, r22
 5a0:	77 1f       	adc	r23, r23
 5a2:	88 1f       	adc	r24, r24
 5a4:	91 50       	subi	r25, 0x01	; 1
 5a6:	50 40       	sbci	r21, 0x00	; 0
 5a8:	a9 f7       	brne	.-22     	; 0x594 <__mulsf3_pse+0x64>
 5aa:	9e 3f       	cpi	r25, 0xFE	; 254
 5ac:	51 05       	cpc	r21, r1
 5ae:	80 f0       	brcs	.+32     	; 0x5d0 <__mulsf3_pse+0xa0>
 5b0:	0c 94 31 02 	jmp	0x462	; 0x462 <__fp_inf>
 5b4:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <__fp_szero>
 5b8:	5f 3f       	cpi	r21, 0xFF	; 255
 5ba:	e4 f3       	brlt	.-8      	; 0x5b4 <__mulsf3_pse+0x84>
 5bc:	98 3e       	cpi	r25, 0xE8	; 232
 5be:	d4 f3       	brlt	.-12     	; 0x5b4 <__mulsf3_pse+0x84>
 5c0:	86 95       	lsr	r24
 5c2:	77 95       	ror	r23
 5c4:	67 95       	ror	r22
 5c6:	b7 95       	ror	r27
 5c8:	f7 95       	ror	r31
 5ca:	e7 95       	ror	r30
 5cc:	9f 5f       	subi	r25, 0xFF	; 255
 5ce:	c1 f7       	brne	.-16     	; 0x5c0 <__mulsf3_pse+0x90>
 5d0:	fe 2b       	or	r31, r30
 5d2:	88 0f       	add	r24, r24
 5d4:	91 1d       	adc	r25, r1
 5d6:	96 95       	lsr	r25
 5d8:	87 95       	ror	r24
 5da:	97 f9       	bld	r25, 7
 5dc:	08 95       	ret

000005de <_exit>:
 5de:	f8 94       	cli

000005e0 <__stop_program>:
 5e0:	ff cf       	rjmp	.-2      	; 0x5e0 <__stop_program>
